<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><META content="IE=5.0000" http-equiv="X-UA-Compatible">
<TITLE>INTUIT.ru::Интернет-Университет Информационных Технологий</TITLE>
<META content="text/html; charset=windows-1251" http-equiv=Content-Type>
<META name=“robots” content=“noindex,nofollow”><LINK rel=stylesheet 
type=text/css href="mhtml:prcmsvs2010_23_files/printable.css">
<META name=GENERATOR content="MSHTML 10.00.9200.16384"></HEAD>
<BODY leftMargin=6 topMargin=6 marginwidth="6" marginheight="6">
<DIV align=left><SPAN style="FONT-WEIGHT: bold; COLOR: #000000">&nbsp;&nbsp; 
<SPAN style="FONT-SIZE: 12pt">Интернет-Университет Информационных 
Технологий</SPAN> </SPAN></DIV>&nbsp;&nbsp; <SPAN 
style="COLOR: #330066; TEXT-DECORATION: underline" align="rright"><A 
href="http://www.intuit.ru/">http://www.intuit.ru/</A></SPAN> 
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD height=8 colSpan=3><IMG 
      src="Контрольная%20работа%20№2_files/mht889E(1).tmp" width=1 
  height=8></TD></TR>
  <TR>
    <TD class=orang height=1 colSpan=3><IMG 
      src="Контрольная%20работа%20№2_files/mht889E(1).tmp" width=1 
  height=1></TD></TR>
  <TR>
    <TD height=8 colSpan=3><IMG 
      src="Контрольная%20работа%20№2_files/mht889E(1).tmp" width=1 
  height=8></TD></TR>
  <TR vAlign=top>
    <TD><IMG src="Контрольная%20работа%20№2_files/mht889E(1).tmp" width=8 
      height=1></TD>
    <TD><!-- content -->
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
          <TD class=head>Программирование на языке C в Microsoft Visual Studio 
            2010</TD></TR>
        <TR>
          <TD height=4><IMG 
            src="Контрольная%20работа%20№2_files/mht889E(1).tmp" width=1 
            height=4></TD></TR>
        <TR>
          <TD class=orang height=1><IMG 
            src="Контрольная%20работа%20№2_files/mht889E(1).tmp" width=1 
            height=1></TD></TR>
        <TR>
          <TD height=8><IMG 
            src="Контрольная%20работа%20№2_files/mht889E(1).tmp" width=1 
            height=8></TD></TR>
        <TR>
          <TD><SPAN class=headsub>Дополнительные материалы: Контрольная работа 
            №2: версия для печати и PDA</SPAN> </TD></TR>
        <TR>
          <TD height=8><IMG 
            src="Контрольная%20работа%20№2_files/mht889E(1).tmp" width=1 
            height=8></TD></TR>
        <TR>
          <TD class=orang height=1><IMG 
            src="Контрольная%20работа%20№2_files/mht889E(1).tmp" width=1 
            height=1></TD></TR>
        <TR>
          <TD height=8><IMG 
            src="Контрольная%20работа%20№2_files/mht889E(1).tmp" width=1 
            height=8></TD></TR>
        <TR>
          <TD><A name=sect1></A>
            <H3>Покупки в супермаркете</H3>
            <P id=id_1>Сканер в кассе супермаркета выдает последовательность 
            штрих-кодов для товаров в корзине покупок, например:</P>
            <DIV id=mark_1 class=lecture_mark></DIV>
            <DIV class=example><PRE>1234, 4719, 3814, 1112, 1111, 1111, 1234,</PRE></DIV>
            <P id=id_3>которая должна быть преобразована в чек следующего 
            вида:</P>
            <DIV id=mark_3 class=lecture_mark></DIV>
            <DIV class=example><PRE>C supermarket
Dry Sherry, 1lt .......... (x2)  $108.20
Fish Fingers ............. (x1)   $12.11
Orange Jelly ............. (x1)    $5.61
Giant Hula Hoops ......... (x1)   $13.31
Hula Hoops ............... (x2)    $4.22
TOTAL .......................... $143.45</PRE></DIV>
            <P id=id_5>Решение начнем с анализа данных. Для представления 
            номенклатурной единицы супермаркета создадим структуру, хранящую 
            данные о штрих-коде товара, его наименовании и цене. Цену будем 
            хранить в центах. Определение структуры:</P>
            <DIV id=mark_5 class=lecture_mark></DIV>
            <DIV class=example><PRE>/// Информация о товаре магазина
struct Item {
	/// штрих-код товара
	int m_barCode;
	/// наименование товара, не более 85 символов
	char m_name[86];
	/// цена 1 единицы товара в центах
	int m_price;
};</PRE></DIV>
            <P id=id_7>База данных (БД) товаров в простейшем случае – массив, 
            который хранит структуры товара и количество номенклатурных позиций 
            супермаркета. Опишем БД товаров в виде следующей структуры:</P>
            <DIV id=mark_7 class=lecture_mark></DIV>
            <DIV class=example><PRE>/// База данных товаров
struct ItemDatabase {
	/// количество товаров в БД
	int m_count;
	/// массив товаров
	struct Item *m_items;
};</PRE></DIV>
            <P id=id_9>Для поиска товара по его штрих-коду в БД создадим функцию 
            <SPAN class=texample>FindItem()</SPAN>, которая будет принимать два 
            аргумента: указатель на БД товаров и штрих-код товара, информацию по 
            которому необходимо извлечь из БД:</P>
            <DIV id=mark_9 class=lecture_mark></DIV>
            <DIV class=example><PRE>/// Поиск товара в БД по штрих-коду
struct Item *
FindItem (const struct ItemDatabase *database, int barCode)
{
	int i;
	assert (database != NULL);
	assert (database-&gt;m_count &gt; 0);
	for (i = 0; i &lt; database-&gt;m_count; ++i)
		if (database-&gt;m_items[i].m_barCode == barCode)
			return database-&gt;m_items + i;
	return database-&gt;m_items;
}</PRE></DIV>
            <P id=id_12>Функция линейным поиском проходит по БД товаров, и если 
            ей удается найти товар с соответствующим штрих-кодом, возвращает 
            указатель на структуру с информацией о нем. Если товара с таким 
            штрих-кодом нет, функция возвращает указатель на первый товар в 
            БД.</P>
            <DIV id=mark_12 class=lecture_mark></DIV>
            <P id=id_13>Для представления товара в чеке введем дополнительную 
            структуру, которая будет хранить пару "товар – количество товара в 
            чеке":</P>
            <DIV id=mark_13 class=lecture_mark></DIV>
            <DIV class=example><PRE>/// Строка счета
struct BillItem {
	/// товар
	const struct Item *m_item;
	/// количество в счете
	int m_quantity;
};

// Чек – это массив структур BillItem.
/// Счет
struct Bill {
	/// количество товаров в счете
	int m_count;
	/// массив товаров в счете
	struct BillItem *m_items;
};</PRE></DIV>
            <P id=id_15>Создадим две вспомогательные функции, которые будут 
            выполнять управление памятью для структуры чека. Функция <SPAN 
            class=texample>AllocBill()</SPAN> выделяет память под структуру чека 
            и резервирует память под массив товаров; функция <SPAN 
            class=texample>FreeBill()</SPAN> освобождает всю память, связанную с 
            чеком:</P>
            <DIV id=mark_15 class=lecture_mark></DIV>
            <DIV class=example><PRE>/// Выделяет память под счет
struct Bill * AllocBill (int itemsCount) {
	struct Bill *result;

	result = malloc (sizeof (struct Bill));
	if (!result)
		return NULL; // выделение памяти было неуспешным
	result-&gt;m_count = 0;
	result-&gt;m_items = malloc (itemsCount * sizeof (struct BillItem));
	if (!result-&gt;m_items &amp;&amp; itemsCount &gt; 0) {
		free (result);
		return NULL;
	}
	return result;
}


/// Освобождает память, связанную со структурой счете
void FreeBill (struct Bill *bill) {
	assert (bill != NULL);

	if (bill-&gt;m_items)
		free (bill-&gt;m_items);
	free (bill);
}</PRE></DIV>
            <P id=id_19>Для печати чека на экране создадим функцию <SPAN 
            class=texample>PrintBill()</SPAN>. На входе она принимает указатель 
            на печатаемый чек и выводит его на экран с соответствующим 
            форматированием:</P>
            <DIV id=mark_19 class=lecture_mark></DIV>
            <DIV class=example><PRE>/// Печатает счет на экран
void PrintBill (const struct Bill *bill) {
	int i;
	int totalBill = 0;
	assert (bill != NULL);
// печатаем заголовок 
	printf ("C supermarket\n\n");
	// печатаем список товаров
	for (i = 0; i &lt; bill-&gt;m_count; ++i) {
int totalLine = bill-&gt;m_items[i].m_item-&gt;m_price*bill-&gt;m_items[i].m_quantity;
		
		totalBill += totalLine;
		printf ("%s (x%d) $%d.%d\n", 
				bill-&gt;m_items[i].m_item-&gt;m_name,
				bill-&gt;m_items[i].m_quantity,
				totalLine / 100,
				totalLine % 100
			);
	}
	// печатаем строку итого
printf ("\nTOTAL $%d.%d\n", totalBill / 100, totalBill % 100);
}</PRE></DIV>
            <P id=id_22>Центральной функцией является функция <SPAN 
            class=texample>ProduceBill()</SPAN>, которая по массиву штрих-кодов 
            создает структуру счета. Функция сначала выделяет память под 
            результат при помощи <SPAN class=texample>AllocBill()</SPAN>, затем 
            проходит по списку переданных штрих-кодов, ищет информацию о 
            соответствующем товаре в БД и включает ее в счет. Если в счете уже 
            имеется такой товар, то функция просто увеличивает его количество. 
            Если такого товара еще нет, функция включает в счет новую 
строку:</P>
            <DIV id=mark_22 class=lecture_mark></DIV>
            <DIV class=example><PRE>/// Создает счет по списку товаров
struct Bill *
ProduceBill (const struct ItemDatabase *database, const int *barCodes, int count)
{
	int i;
	struct Bill *result;
	assert (database != NULL);
	assert (barCodes != NULL);

	result = AllocBill (count);	
	if (!result)
		return NULL;
// формируем счет
	for (i = 0; i &lt; count; ++i) {
// выполняем поиск элемента в счете, может он был добавлен ранее
		int index = IndexOfBillItem (result, barCodes[i]);
		if (index == -1) {
			// не нашли, добаляем новый элемент
result-&gt;m_items[result-&gt;m_count].m_item = FindItem (database, barCodes[i]);
		result-&gt;m_items[result-&gt;m_count].m_quantity = 1;
			++result-&gt;m_count;
		}
		else {
			// нашли, тогда увеличиваем количество
			++result-&gt;m_items[index].m_quantity;
		}
	}
	return result;
}</PRE></DIV>
            <P id=id_26>Для проверки, есть ли уже товар с некоторым штрих-кодом 
            в счете, функция <SPAN class=texample>ProduceBill()</SPAN> 
            использует специальную вспомогательную функцию <SPAN 
            class=texample>IndexOfBillItem()</SPAN>. Функция возвращает индекс 
            товара в счете либо число –1, если такого товара в счете нет. 
            Программный код вспомогательной функции <SPAN 
            class=texample>IndexOfBillItem()</SPAN>:</P>
            <DIV id=mark_26 class=lecture_mark></DIV>
            <DIV class=example><PRE>/// Поиск товара в счете
int IndexOfBillItem (const struct Bill *bill, int barCode)
{
	int i;
	assert (bill != NULL);
	for (i = 0; i &lt; bill-&gt;m_count; ++i)
		if (bill-&gt;m_items[i].m_item-&gt;m_barCode == barCode)
			return i;
	return -1;
}</PRE></DIV>
            <P id=id_31>Базу данных товаров определим в виде константы с помощью 
            спецификатора <SPAN class=texample>static</SPAN>:</P>
            <DIV id=mark_31 class=lecture_mark></DIV>
            <DIV class=example><PRE>/// База данных товаров в супермаркете
static struct Item g_databaseItems[] = {
	{ 0, "Unknown item", 0 },
	{ 4719, "Fish Fingers", 1211 },
	{ 5643, "Nappies", 1010 },
	{ 3814, "Orange Jelly", 561 },
	{ 1111, "Hula Hoops", 211 },
	

     { 1112, "Giant Hula Hoops", 1331 },
	{ 1234, "Dry Sherry, 1lt", 5401 }
};
const struct ItemDatabase g_database = {
	sizeof (g_databaseItems) / sizeof (g_databaseItems[0]), 
	g_databaseItems
};</PRE></DIV>
            <P id=id_34>Функция <SPAN class=texample>main()</SPAN> выполняет 
            создание и печать счета:</P>
            <DIV id=mark_34 class=lecture_mark></DIV>
            <DIV class=example><PRE>int main (int argc, char* argv[])
{ 	int codes[] = { 1234, 4719, 3814, 1112, 1111, 1111, 1234 };
	struct Bill *bill = ProduceBill (&amp;g_database, codes, sizeof (codes) / sizeof (codes[0]));
	if (!bill) {
		printf ("Error: out of memory while creating a bill");
		return -1;
	}
	PrintBill (bill);
	FreeBill (bill);
	return 0; }</PRE></DIV>
            <P id=id_37><B>Задание</B></P>
            <DIV id=mark_37 class=lecture_mark></DIV>
            <OL id=id_38>
              <LI>Произведите сборку программы и проведите ее компиляцию.
              <LI><SPAN class=xml_em_italic>Форматирование счета</SPAN>. 
              Измените функцию <SPAN class=texample>PrintBill()</SPAN>, чтобы 
              она печатала счет в соответствии с форматированием, приведенным в 
              условии. Ширина строки счета – 40 символов.
              <LI><SPAN class=xml_em_italic>Отбрасывание неизвестных 
              товаров</SPAN>. Измените функцию <SPAN 
              class=texample>ProduceBill()</SPAN> таким образом, чтобы товары, 
              не найденные в БД, не включались в счет.
              <LI><SPAN class=xml_em_italic>Вычисление скидки</SPAN>. За каждые 
              две купленные бутылки шерри (код 1234) супермаркет дает скидку 
              $5.00 с суммы счета. Добавьте вычисление скидки по счету. 
              Результирующий счет должен выглядеть следующим образом:
              <DIV class=example><PRE>C supermarket

Dry Sherry, 1lt .......... (x2)  $108.20
Fish Fingers ............. (x1)   $12.11
Orange Jelly ............. (x1)    $5.61
Giant Hula Hoops ......... (x1)   $13.31
Hula Hoops ............... (x2)    $4.22

Discount ......................... $5.00

TOTAL .......................... $138.27</PRE></DIV>
              <LI><SPAN class=xml_em_italic>Оптимизация поиска товара в 
              БД</SPAN>. Функция <SPAN class=texample>FindItem()</SPAN> имеет 
              сложность O(N). Измените структуру БД или тело функции <SPAN 
              class=texample>FindItem()</SPAN> таким образом, чтобы уменьшить 
              алгоритмическую сложность поиска.
              <LI><SPAN class=xml_em_italic>Загрузка БД из файла</SPAN>. 
              Разработайте функции, выполняющие загрузку списка товаров 
              супермаркета из CSV-файла. CSV-файлом (или файлом значений, 
              разделенных запятыми, comma-separated values) называется текстовый 
              файл, в котором содержаться записи, состоящие из нескольких полей. 
              При этом каждая новая строка соответствует одной записи. Поля 
              одной записи разделяются запятыми. Если значение поля не содержит 
              запятых, то оно записывается непосредственно. Если значение 
              содержит запятые, то оно заключается в двойные кавычки (").Если в 
              такой последовательности содержится двойная кавычка, она 
              удваивается. Имеется разновидность формата, когда все строковые 
              значения заключаются в кавычки. Пример БД товаров в CSV-файле:
              <DIV class=example><PRE>4719,"Fish Fingers",1211
5643,"Nappies",1010
3814,"Orange Jelly",561
1111,"Hula Hoops",211
1112,"Giant Hula Hoops",1331
1234,"Dry Sherry, 1lt",5401</PRE></DIV>
              <LI><SPAN class=xml_em_italic>Редактирование БД</SPAN>. Добавьте 
              функции для добавления/удаления товаров в БД. Функция <SPAN 
              class=texample>AddItem()</SPAN> должна добавлять описание товара в 
              БД. При этом если товар с таким штрих-кодом уже существует в БД, 
              он должен замещаться новым. Функция <SPAN 
              class=texample>RemoveItem()</SPAN> должна удалять товар по его 
              штрих-коду из БД.
              <LI><SPAN class=xml_em_italic>Анализ продаж</SPAN>. Разработайте 
              функцию <SPAN class=texample>TotalSales()</SPAN>, которая 
              принимает на вход массив чеков и печатает на экране таблицу 
              проданных товаров по всем чекам. В таблице должна присутствовать 
              информация о названии товара, проданном количестве, сумме 
              (возможно, с учетом скидки по соответствующим позициям).
              <LI>Разработайте функцию <SPAN 
              class=texample>AnalyzeSales()</SPAN>, которая принимает на вход 
              массив чеков и печатает на экране таблицу пар товаров, которые 
              чаще всего покупают вместе. Пара товаров должна включаться в 
              таблицу пар, если она присутствует более чем в одном чеке.</LI></OL>
            <DIV id=mark_38 class=lecture_mark></DIV></TD></TR>
        <TR>
          <TD height=8><IMG 
            src="Контрольная%20работа%20№2_files/mht889E(1).tmp" width=1 
            height=8></TD></TR></TBODY></TABLE><!-- /content --></TD>
    <TD><IMG src="Контрольная%20работа%20№2_files/mht889E(1).tmp" width=8 
      height=1></TD></TR></TBODY></TABLE><!-- /bottom -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD class=orang height=1><IMG 
      src="Контрольная%20работа%20№2_files/mht889E(1).tmp" width=1 
  height=1></TD></TR>
  <TR>
    <TD class=ltxt align=center>© INTUIT.ru, 2003-2010. Все права 
  защищены.</TD></TR></TBODY></TABLE><!-- /bottom -->
<SCRIPT type=text/javascript src="">
</SCRIPT>

<SCRIPT type=text/javascript>
_uacct = "UA-3475067-1";
urchinTracker();
</SCRIPT>
</BODY></HTML>
