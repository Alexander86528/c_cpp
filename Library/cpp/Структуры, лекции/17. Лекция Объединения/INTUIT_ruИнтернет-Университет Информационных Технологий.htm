<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0071)http://www.intuit.ru/department/algorithms/staldata/17/staldata_17.html -->
<HTML><HEAD><TITLE>INTUIT.ru::Интернет-Университет Информационных Технологий</TITLE>
<META content="text/html; charset=windows-1251" http-equiv=Content-Type><LINK 
rel=stylesheet type=text/css 
href="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/printable.css">
<META name=GENERATOR content="MSHTML 9.00.8080.16413"></HEAD>
<BODY leftMargin=6 topMargin=6 marginwidth="6" marginheight="6">
<DIV align=left><SPAN style="COLOR: #000000; FONT-WEIGHT: bold">&nbsp;&nbsp; 
<SPAN style="FONT-SIZE: 12pt">Интернет-Университет Информационных 
Технологий</SPAN> </SPAN></DIV>&nbsp;&nbsp; <SPAN 
style="COLOR: #330066; TEXT-DECORATION: underline" 
align="rright">http://www.INTUIT.ru</SPAN> 
<TABLE border=0 cellSpacing=0 cellPadding=0 width="100%">
  <TBODY>
  <TR>
    <TD height=8 colSpan=3><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=1 height=8></TD></TR>
  <TR>
    <TD class=orang height=1 colSpan=3><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=1 height=1></TD></TR>
  <TR>
    <TD height=8 colSpan=3><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=1 height=8></TD></TR>
  <TR vAlign=top>
    <TD><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=8 height=1></TD>
    <TD><!-- content -->
      <TABLE border=0 cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD class=head>Структуры и алгоритмы компьютерной обработки 
        данных</TD></TR>
        <TR>
          <TD height=4><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=4></TD></TR>
        <TR>
          <TD class=orang height=1><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=1></TD></TR>
        <TR>
          <TD height=8><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=8></TD></TR>
        <TR>
          <TD><SPAN class=headsub>17. Лекция: Объединения: версия для печати и 
            PDA</SPAN> <BR><SPAN class=rtxt>В лекции рассматриваются 
            определения, способы объявления, объединений как частного случая 
            структур, методы доступа к данным объединения, размещение 
            объединений и определение их размера в памяти, использование 
            объединений при объявлении переменных с изменяемой структурой. 
            </SPAN></TD></TR>
        <TR>
          <TD height=8><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=8></TD></TR>
        <TR>
          <TD class=orang height=1><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=1></TD></TR>
        <TR>
          <TD height=8><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=8></TD></TR>
        <TR>
          <TD><A name=sect1></A>
            <H3></H3>
            <P id=id_1><B>Цель лекции:</B> изучить понятия, оформления и 
            определения объединений, доступ к элементам объединения, указатели 
            на объединения и научиться решать задачи с использованием 
            объединений на языке C++.</P>
            <DIV id=mark_1 class=lecture_mark></DIV>
            <P id=id_2><SPAN class=xml_em_italic>Объединение</SPAN> – это 
            частный случай структуры.</P>
            <DIV id=mark_2 class=lecture_mark></DIV>
            <P id=id_3>Объединение подобно структуре, однако в каждый момент 
            времени может использоваться (или, другими словами, быть ответным) 
            только один из элементов объединения.</P>
            <DIV id=mark_3 class=lecture_mark></DIV>
            <P id=id_4><SPAN class=texample>Объединение (смеси)</SPAN> – объект, 
            который в каждый момент времени содержит один из нескольких 
            элементов различных типов.</P>
            <DIV id=mark_4 class=lecture_mark></DIV>
            <P id=id_6>Объединение является структурой данных, члены которой 
            расположены по одному и тому же адресу. Поэтому размер объединения 
            равен размеру его наибольшего члена. В любой момент времени 
            объединение хранит значение только одного из членов.</P>
            <DIV id=mark_6 class=lecture_mark></DIV>
            <P id=id_7>Объявление объединения определяет имя переменной 
            объединения и специфицирует множество переменных, называемых 
            элементами объединения, которые могут быть различных типов. 
            Переменная с типом объединения запоминает любую отдельную величину, 
            определяемую на-бором элементов объединения.</P>
            <DIV id=mark_7 class=lecture_mark></DIV><A name=sect2></A>
            <H3>Определение объединений </H3>
            <P id=id_8>Все компоненты объявления структур, такие как шаблоны, 
            имена типов, имена элементов и т.д. применимы и при объявлении 
            объединений. Единственное отличие состоит в том, что при объявлении 
            объединения вместо ключевого слова <SPAN 
            class=texample>struct</SPAN> используется <SPAN 
            class=texample>union</SPAN>.</P>
            <DIV id=mark_8 class=lecture_mark></DIV>
            <P id=id_11>Синтаксис:</P>
            <DIV id=mark_11 class=lecture_mark></DIV>
            <DIV class=example><PRE>union [ИмяОбъединения] { 
                        ОпределенияЭлементов; 
                       } ОбозначениеОбъединения;
</PRE></DIV>
            <P id=id_13>где <SPAN class=texample>union</SPAN> – спецификатор 
            типа; <SPAN class=texample>ИмяОбъединения</SPAN> – идентификатор; 
            <SPAN class=texample>ОпределенияЭлементов</SPAN> – совокупность 
            описаний объектов, каждый из которых служит прототипом одного из 
            элементов объединений.</P>
            <DIV id=mark_13 class=lecture_mark></DIV>
            <P id=id_17>Например:</P>
            <DIV id=mark_17 class=lecture_mark></DIV>
            <DIV class=example><PRE>union {
       char hh[2];
       int ii;
       } CC;
</PRE></DIV>
            <P id=id_19>Главной особенностью объединения является то, что для 
            каждого из объявленных элементов выделяется одна и та же область 
            памяти, т.е. они перекрываются. Хотя доступ к этой области памяти 
            возможен с использованием любого из элементов, элемент для этой цели 
            должен выбираться так, чтобы полученный результат не был 
            бессмысленным.</P>
            <DIV id=mark_19 class=lecture_mark></DIV>
            <P id=id_20>Как и для структурных типов, с помощью <SPAN 
            class=texample>typedef</SPAN> можно вводить обозначения объединяющих 
            типов.</P>
            <DIV id=mark_20 class=lecture_mark></DIV>
            <P id=id_22>Синтаксис:</P>
            <DIV id=mark_22 class=lecture_mark></DIV>
            <DIV class=example><PRE>typedef union [ИмяОбъединения] 
        {
         ОпределенияЭлементов; 
        } ОбозначениеОбъединения; 
</PRE></DIV>
            <P id=id_24>Например:</P>
            <DIV id=mark_24 class=lecture_mark></DIV>
            <DIV class=example><PRE>typedef union uni {
                   double d;
                   int i[4];
                   char ch[8];
                  } u_name;
</PRE></DIV>
            <P id=id_26>На основе такого определения типа можно вводить 
            конкретные объединения двумя способами:</P>
            <DIV id=mark_26 class=lecture_mark></DIV>
            <DIV class=example><PRE>union uni a, b;
u_name x, y;
</PRE></DIV>
            <P id=id_28>Объединение применяется для следующих целей:</P>
            <DIV id=mark_28 class=lecture_mark></DIV>
            <UL id=id_29>
              <LI>инициализации используемого объекта памяти, если в каждый 
              момент времени только один объект из многих является активным; 
              <LI>интерпретации основного представления объекта одного типа, как 
              если бы этому объекту был присвоен другой тип. </LI></UL>
            <DIV id=mark_29 class=lecture_mark></DIV><A name=sect3></A>
            <H3>Доступ к элементам объединения (полям данных)</H3>
            <P id=id_32>Для обращения к элементу объединения используются те же 
            конструкции, что и для обращения к элементу структуры:</P>
            <DIV id=mark_32 class=lecture_mark></DIV>
            <DIV class=example><PRE>ИмяОбъединения.ИмяЭлемента
(* УказательНаОбъединение).ИмяЭлемента
УказательНаОбъединение-&gt;ИмяЭлемента
</PRE></DIV>
            <P id=id_34>Например:</P>
            <DIV id=mark_34 class=lecture_mark></DIV>
            <DIV class=example><PRE>СС.hh
(*pin).mas
pin–&gt;mas
</PRE></DIV>
            <P id=id_36>Чтобы работать с объединением напрямую, надо 
            использовать оператор "точка" (.). Если к переменной объединения 
            обращение происходит с помощью указателя, надо использовать оператор 
            "стрелка" (<SPAN class=texample>-&gt;</SPAN>).</P>
            <DIV id=mark_36 class=lecture_mark></DIV><A name=sect4></A>
            <H3>Определение размера памяти, выделяемой под объединение</H3>
            <P id=id_38>Память, которая соответствует переменной типа 
            объединение, определяется величиной для размещения любого отдельного 
            элемента объединения.</P>
            <DIV id=mark_38 class=lecture_mark></DIV>
            <P id=id_39>В отличие от структуры, объединение может в любой момент 
            времени содержать только один из своих элементов. Объединение 
            позволяет использовать одну область памяти для хранения различных 
            видов данных в разные моменты времени. Фактически, объединение – это 
            структура, в которой все поля начинаются со смещением 0, таким 
            образом, поля накладываются друг на друга.</P>
            <DIV id=mark_39 class=lecture_mark></DIV>
            <P id=id_40>Когда используется наименьший элемент объединения, то 
            переменная типа объединения может содержать неиспользованное 
            пространство. Все элементы объединения запоминаются в одном и том же 
            пространстве памяти переменной, начиная с одного и того же адреса. 
            Запомненные значения затираются каждый раз, когда присваивается 
            значение очередного элемента объединения.</P>
            <DIV id=mark_40 class=lecture_mark></DIV>
            <P id=id_41>Например:</P>
            <DIV id=mark_41 class=lecture_mark></DIV>
            <DIV id=id_42 class=xml_table_env><A></A>
            <TABLE class=xml_table border=0 cellSpacing=1 cellPadding=2>
              <TBODY>
              <TR>
                <TD bgColor=#eaeaea vAlign=top>
                  <DIV class=example><PRE>struct s_tag {
              char c;
              int i;
              double d;
             } s_item;
</PRE></DIV></TD>
                <TD bgColor=#eaeaea vAlign=top>
                  <DIV class=example><PRE>union u_tag {
             char c;
             int i;
             double d;
            } u_item;
</PRE></DIV></TD></TR>
              <TR>
                <TD bgColor=#eaeaea vAlign=top>
                  <P id=id_45 align=left><A></A>
                  <DIV><IMG alt="" 
                  src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/17_001.png"></DIV><BR>
                  <P></P>
                  <DIV id=mark_45 class=lecture_mark></DIV></TD>
                <TD bgColor=#eaeaea vAlign=top>
                  <P id=id_46 align=left><A></A>
                  <DIV><IMG alt="" 
                  src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/17_002.png"></DIV><BR>
                  <P></P>
                  <DIV id=mark_46 
            class=lecture_mark></DIV></TD></TR></TBODY></TABLE></DIV>
            <DIV id=mark_42 class=lecture_mark></DIV>
            <P id=id_47>Все поля объединения располагаются по одному и тому же 
            адресу. Размер объединения равен наибольшей из длин его полей. То 
            есть память, которая соответствует переменной типа объединения, 
            определяется величиной, необходимой для размещения наиболее длинного 
            элемента объединения. Когда используется элемент меньшей длины, то 
            переменная типа объединения может содержать неиспользуемую память. 
            Объединения применяются для экономии памяти, если известно, что 
            другие поля не потребуются. Также объединение обеспечивает доступ к 
            одному участку памяти с помощью переменных разного типа.</P>
            <DIV id=mark_47 class=lecture_mark></DIV>
            <P id=id_48><SPAN class=xml_em_italic>Пример 1.</SPAN> Определение 
            размера структуры и объединения.</P>
            <DIV id=mark_48 class=lecture_mark></DIV>
            <DIV class=example><PRE>#include "stdafx.h"
#include &lt;iostream&gt;
using namespace std;

int _tmain(int argc, _TCHAR* argv[]) {
  struct s_tag {
                char c;
                int i;
                double d;
               } s_item;
  union u_tag {
               char c;
               int i;
               double d;
              } u_item;
  printf("Размер структуры = %d\n", sizeof(s_item));
  printf("Размер объединения = %d\n", sizeof(u_item)); 
  system("pause");
  return 0;
}
</PRE></DIV>
            <P id=id_50>Результат выполнения программы:</P>
            <DIV id=mark_50 class=lecture_mark></DIV>
            <DIV class=example><PRE>Размер структуры = 16 
Размер объединения = 8 
</PRE></DIV>
            <P id=id_52>Например:</P>
            <DIV id=mark_52 class=lecture_mark></DIV>
            <DIV class=example><PRE>union { 
       char fio[30];
       char adres[80];
       int vozrast;
       int telefon; 
      } inform;
union {  
       int ax;
       char al[2]; 
      } ua;
</PRE></DIV>
            <P id=id_54>При использовании объекта <SPAN 
            class=texample>inform</SPAN> типа <SPAN class=texample>union</SPAN> 
            можно обрабатывать только тот элемент, который получил значение, 
            т.е. после присвоения значения элементу <SPAN 
            class=texample>inform.fio</SPAN>, не имеет смысла обращаться к 
            другим элементам. Объединение <SPAN class=texample>ua</SPAN> 
            позволяет получить отдельный доступ к младшему <SPAN 
            class=texample>ua.al[0]</SPAN> и к старшему <SPAN 
            class=texample>ua.al[1]</SPAN> байтам числа <SPAN 
            class=texample>ua.ax</SPAN>.</P>
            <DIV id=mark_54 class=lecture_mark></DIV><A name=sect5></A>
            <H3>Использование объединений</H3>
            <P id=id_62>Допустимы массивы объединений и указатели на 
            объединения. Объединения могут передаваться функции как параметры и 
            возвращаться функцией.</P>
            <DIV id=mark_62 class=lecture_mark></DIV>
            <P id=id_63>Операции, применимые к структурам, аналогичны и для 
            объединений, т.е. законны присваивание объединения и копирование его 
            как единого целого, взятие адреса от объединения и доступ к 
            отдельным его элементам.</P>
            <DIV id=mark_63 class=lecture_mark></DIV><A name=sect6></A>
            <H4>Объединение как элемент структуры</H4>
            <P id=id_64>Объединения часто включаются в структуры, один из 
            элементов которых является ключом, указывающим тип хранимого в 
            памяти элемента объединения.</P>
            <DIV id=mark_64 class=lecture_mark></DIV>
            <P id=id_65>Например:</P>
            <DIV id=mark_65 class=lecture_mark></DIV>
            <DIV class=example><PRE>//содержит информацию о работающих служащих и пенсионерах
struct mail {
             char id;  // a - active (), r - retired()
             union {
                    struct {
                            char name[30];
                            char dept[10];
                            char location[3];
                           } active;
                    struct {
                            char name[30];
                            char street[20];
                            char city_state[3];
                            char zip[5];
                           } retired;
                   } info;
            } person;
</PRE></DIV>
            <P id=id_67>Структура типа <SPAN class=texample>struct mail</SPAN> 
            используется для хранения почтового адреса работающего служащего или 
            пенсионера (<A 
            href="http://www.intuit.ru/department/algorithms/staldata/17/staldata_17.html#image.17.1">рис. 
            17.1</A>). При заполнении структуры этого типа информацией в нее 
            заносится порция данных, соответствующая элементам <SPAN 
            class=texample>active</SPAN> или <SPAN class=texample>retired</SPAN> 
            объединения <SPAN class=texample>info</SPAN>. Поле <SPAN 
            class=texample>id</SPAN> устанавливается равным <SPAN 
            class=texample>'a'</SPAN> или <SPAN class=texample>'r'</SPAN> для 
            указания фактически записанного в объединении элемента. При 
            применении объединения используется меньше памяти, чем в случае 
            применения структуры, которая имела бы идентичные поля, но некоторые 
            из них не использовались бы.</P>
            <DIV id=mark_67 class=lecture_mark></DIV>
            <P id=id_75 align=left><A name=image.17.1></A>
            <DIV><IMG alt="Объединение как элемент структуры" 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/17_01.png" 
            width=327 height=213></DIV><BR><B>Рис. 17.1.</B>&nbsp; Объединение 
            как элемент структуры
            <P></P>
            <DIV id=mark_75 class=lecture_mark></DIV><A name=sect7></A>
            <H4>Переменные с изменяемой структурой</H4>
            <P id=id_76>Очень часто некоторые объекты программы относятся к 
            одному и тому же классу, отличаясь лишь некоторыми деталями. В таких 
            случаях используются переменные с изменяемой структурой. Рассмотрим, 
            например, представление геометрических фигур. Общая информация о 
            фигурах может включать такие элементы, как площадь, периметр. Однако 
            соответствующая информация о геометрических размерах может оказаться 
            различной в зависимости от их формы.</P>
            <DIV id=mark_76 class=lecture_mark></DIV>
            <P id=id_77><SPAN class=xml_em_italic>Пример 2</SPAN>. Информация о 
            геометрических фигурах представляется на основе комбинированного 
            использования структуры и объединения.</P>
            <DIV id=mark_77 class=lecture_mark></DIV>
            <DIV class=example><PRE>struct figure {
               double area,perimetr; // общие компоненты
               int type; // признак компонента
               union { // перечисление компонент
                       double radius; // окружность
                       double a[2];   // прямоугольник
                       double b[3];   // треугольник
                      } geom_fig;
              } fig1, fig2;
</PRE></DIV>
            <P id=id_79>В общем случае каждый объект типа <SPAN 
            class=texample>figure</SPAN> будет состоять из трех компонентов: 
            <SPAN class=texample>area</SPAN>, <SPAN 
            class=texample>perimetr</SPAN>, <SPAN class=texample>type</SPAN>. 
            Компонент <SPAN class=texample>type</SPAN> называется меткой 
            активного компонента, так как он используется для указания, какой из 
            компонентов объединения <SPAN class=texample>geom_fig</SPAN> 
            является активным в данный момент. Такая структура называется 
            переменной структурой, потому что ее компоненты меняются в 
            зависимости от значения метки активного компонента (значение <SPAN 
            class=texample>type</SPAN>). Отметим, что вместо компоненты <SPAN 
            class=texample>type</SPAN> типа <SPAN class=texample>int</SPAN>, 
            целесообразно было бы использовать перечисляемый тип. Например, 
            такой</P>
            <DIV id=mark_79 class=lecture_mark></DIV>
            <DIV class=example><PRE>enum figure_chess {CIRCLE, BOX, TRIANGLE};
</PRE></DIV>
            <P id=id_90>Константы <SPAN class=texample>CIRCLE</SPAN>, <SPAN 
            class=texample>BOX</SPAN>, <SPAN class=texample>TRIANGLE</SPAN> 
            получат значения соответственно равные 0, 1, 2. Переменная <SPAN 
            class=texample>type</SPAN> может быть объявлена как имеющая 
            перечислимый тип:</P>
            <DIV id=mark_90 class=lecture_mark></DIV>
            <DIV class=example><PRE>enum figure_chess type;
</PRE></DIV>
            <P id=id_96>В этом случае компилятор С++ предупредит программиста о 
            потенциально ошибочных присваиваниях, таких, например, как <SPAN 
            class=texample>figure.type = 40</SPAN>;</P>
            <DIV id=mark_96 class=lecture_mark></DIV>
            <P id=id_98>В общем случае переменная структуры будет состоять из 
            трех частей: набор общих компонент, метки активного компонента и 
            части с меняющимися компонентами. Общая форма переменной структуры, 
            имеет следующий вид:</P>
            <DIV id=mark_98 class=lecture_mark></DIV>
            <DIV class=example><PRE>struct {
        ОбщиеКомпоненты; МеткаАктивногоКомпонента;
        union { 
               ОписаниеКомпоненты1;
               ОписаниеКомпоненты2;
               ...................
               ОписаниеКомпонентыN;
              } ИдентификаторОбъединения;
       } ИдентификаторСтруктуры;
</PRE></DIV>
            <P id=id_100><SPAN class=texample>Пример 3</SPAN>. Определения 
            переменной структуры с именем <SPAN 
            class=texample>helth_record</SPAN></P>
            <DIV id=mark_100 class=lecture_mark></DIV>
            <DIV class=example><PRE>struct { // общая информация 
        char name[25];    // имя  
        int age;          // возраст 
        char sex;         // пол 
        // метка активного компонента(семейное положение)
        enum merital_status ins;
        // переменная часть 
        union { // холост
                // нет компонент
               struct { // состоит в браке 
                       char marriage_date[8];
                       char spouse_name[25];
                       int  no_children;
                      } marriage_info;
                // разведен */
               char date_divorced[8];
              } marital_info;
       } health_record;
enum marital_status { SINGLE, // холост 
                      MARRIGO, // женат 
                      DIVOREED // разведен 
                    };
</PRE></DIV>
            <P id=id_104>Обращаться к компонентам структуры можно при помощи 
            ссылок:</P>
            <DIV id=mark_104 class=lecture_mark></DIV>
            <DIV class=example><PRE>  helth_record.nаme
  helth_record.ins
  helth_record.marriage_info.marriage_date
</PRE></DIV><A name=sect8></A>
            <H3>Ключевые термины</H3>
            <P id=id_106><B>Значение указателя на объединение</B> – это адрес 
            расположения элементов объединения.</P>
            <DIV id=mark_106 class=lecture_mark></DIV>
            <P id=id_107><B>Объединение (смеси)</B> – объект, который в каждый 
            момент времени содержит один из нескольких элементов различных 
            типов.</P>
            <DIV id=mark_107 class=lecture_mark></DIV>
            <P id=id_108><B>Переменные с изменяемой структурой</B> – это 
            переменные структурного типа, у которых компоненты меняются в 
            зависимости от значения метки активного компонента.</P>
            <DIV id=mark_108 class=lecture_mark></DIV>
            <P id=id_109><B>Размер объединения</B> – это объем памяти, 
            занимаемой объединением.</P>
            <DIV id=mark_109 class=lecture_mark></DIV>
            <P id=id_110><B>Указатель на объединение</B> – это указатель на 
            расположение элементов объединения в памяти.</P>
            <DIV id=mark_110 class=lecture_mark></DIV>
            <P id=id_111><B>Элементы объединения</B> – это множество переменных, 
            определяемых именем переменной объединения.</P>
            <DIV id=mark_111 class=lecture_mark></DIV><A name=sect9></A>
            <H3>Краткие итоги</H3>
            <OL id=id_112>
              <LI>Объединения являются частным случаем структур.
              <LI>Все компоненты объявления структур применимы и при объявлении 
              объединений.
              <LI>Главной особенностью объединения является то, что для каждого 
              из объявленных элементов выделяется одна и та же область памяти.
              <LI>Доступ к элементам объединения аналогичен обращению к 
              элементам структуры.
              <LI>Все поля объединения располагаются по одному и тому же адресу.
              <LI>В конкретный момент времени активным может быть только одно 
              поле объединения.
              <LI>Размер объединения определяется как максимальная величина длин 
              его элементов.
              <LI>Указатель на объединение обеспечивает доступ только к одному 
              любому элементу объединения.
              <LI>Структура может являться переменной, если ее компоненты 
              меняются в зависимости от значения метки активного 
            компонента.</LI></OL>
            <DIV id=mark_112 class=lecture_mark></DIV><A name=sect10></A>
            <H3>Лабораторная работа 17. Объединения</H3>
            <P id=id_122><B>Цель работы:</B> изучить понятия, оформления и 
            определения объединений, доступ к элементам объединения, указатели 
            на объединения и научиться решать задачи с использованием 
            объединений на языке C++.</P>
            <DIV id=mark_122 class=lecture_mark></DIV>
            <P id=id_123>При выполнении лабораторной работы для каждого задания 
            требуется написать программу на языке С++, в которой выполнена 
            разработка объединения в соответствии с постановкой задачи, ввод 
            данных элементов объединения, их обработка и вывод на экран в 
            указанном формате. При этом объединение может являться одним из 
            полей структуры. Ввод данных осуществляется с клавиатуры с учетом 
            требований к входным данным, содержащихся в постановке задачи. 
            Ограничениями на входные данные являются максимальный размер 
            строковых данных, диапазоны числовых типов полей объединения или 
            структуры, максимально допустимый размер массива структур в языке 
            С++.</P>
            <DIV id=mark_123 class=lecture_mark></DIV>
            <P id=id_124><B>Теоретические сведения.</B></P>
            <DIV id=mark_124 class=lecture_mark></DIV>
            <P id=id_125>Ознакомьтесь с материалом лекции 17.</P>
            <DIV id=mark_125 class=lecture_mark></DIV>
            <P id=id_126><B>Задания к лабораторной работе.</B></P>
            <DIV id=mark_126 class=lecture_mark></DIV>
            <P id=id_127>Выполните приведенные ниже задания.</P>
            <DIV id=mark_127 class=lecture_mark></DIV>
            <OL id=id_128>
              <LI>На основе определения структуры из <SPAN 
              class=xml_em_italic>Примера 2</SPAN> лекции 17 разработайте 
              программу, которая запрашивает параметры геометрической фигуры и 
              выводит ее периметр и площадь. 
              <LI>На основе определения структуры из <SPAN 
              class=xml_em_italic>Примера 3</SPAN> лекции 17 разработайте 
              программу, которая запрашивает информацию о трех объектах и 
              выводит ее в виде таблицы.
              <LI>Разработайте структуру, используя объединение: Сотрудник (ФИО, 
              пол, образование, специальность, вуз, должность, стаж). Сотрудник 
              может не иметь высшего образования. Введите информацию о трех 
              сотрудниках и распечатайте в виде таблицы. 
              <LI>Опишите переменную структуру для моделирования, предложенного 
              понятия. Координаты точки (пара вещественных или комплексных 
              чисел). Определите расстояние между двумя введенными точками. 
            </LI></OL>
            <DIV id=mark_128 class=lecture_mark></DIV>
            <P id=id_133><B>Указания к выполнению работы.</B></P>
            <DIV id=mark_133 class=lecture_mark></DIV>
            <P id=id_134>Каждое задание необходимо решить в соответствии с 
            изученными методами объявления и обработки данных объединений в 
            языке С++. В задачах объединение, как правило, является одним из 
            полей структурного типа. При объявлении объединений выполните 
            комментирование используемых полей. При выполнении задач 1 и 2 
            используйте Примеры 2 и 3 соответственно из материалов лекции 17. В 
            задачах 2 и 3 следует использовать массив структур, организовав его 
            вывод в виде таблицы.</P>
            <DIV id=mark_134 class=lecture_mark></DIV>
            <P id=id_135>Следует реализовать каждое задание в соответствии с 
            приведенными этапами:</P>
            <DIV id=mark_135 class=lecture_mark></DIV>
            <UL id=id_136>
              <LI>изучить словесную постановку задачи, выделив при этом все виды 
              данных;
              <LI>сформулировать математическую постановку задачи;
              <LI>выбрать метод решения задачи, если это необходимо;
              <LI>разработать графическую схему алгоритма;
              <LI>записать разработанный алгоритм на языке С++;
              <LI>разработать контрольный тест к программе;
              <LI>отладить программу;
              <LI>представить отчет по работе.</LI></UL>
            <DIV id=mark_136 class=lecture_mark></DIV>
            <P id=id_145><B>Требования к отчету.</B></P>
            <DIV id=mark_145 class=lecture_mark></DIV>
            <P id=id_146>Отчет по лабораторной работе должен соответствовать 
            следующей структуре.</P>
            <DIV id=mark_146 class=lecture_mark></DIV>
            <OL id=id_147>
              <LI>Титульный лист.
              <LI>Словесная постановка задачи. В этом подразделе проводится 
              полное описание задачи. Описывается суть задачи, анализ входящих в 
              нее физических величин, область их допустимых значений, единицы их 
              измерения, возможные ограничения, анализ условий при которых 
              задача имеет решение (не имеет решения), анализ ожидаемых 
              результатов.
              <LI>Математическая модель. В этом подразделе вводятся 
              математические описания физических величин и математическое 
              описание их взаимодействий. Цель подраздела – представить решаемую 
              задачу в математической формулировке.
              <LI>Алгоритм решения задачи. В подразделе описывается разработка 
              структуры алгоритма, обосновывается абстракция данных, задача 
              разбивается на подзадачи. Схема алгоритма выполняется по ЕСПД 
              (ГОСТ 19.003-80 и ГОСТ 19.002-80).
              <LI>Листинг программы. Подраздел должен содержать текст программы 
              на языке программирования С++, реализованный в среде MS Visual 
              Studio 2010.
              <LI>Контрольный тест. Подраздел содержит наборы исходных данных и 
              полученные в ходе выполнения программы результаты.
              <LI>Выводы по лабораторной работе. 
              <LI>Ответы на контрольные вопросы.</LI></OL>
            <DIV id=mark_147 class=lecture_mark></DIV>
            <P id=id_156>Контрольные вопросы</P>
            <DIV id=mark_156 class=lecture_mark></DIV>
            <OL id=id_157>
              <LI>В чем принципиальное отличие размещения в памяти элементов 
              структуры и объединения?
              <LI>Каким образом определяется размер объединения?
              <LI>Какова цель использования объединений в программировании?
              <LI>Какую информацию об объединении содержит указатель на это 
              объединение?
              <LI>Какое значение будет храниться в объединении, если будут 
              проинициализированы все го поля?
              <LI>Какие существуют способы обращения к элементам объединения?
              <LI>В чем отличия различных способов обращения к элементам 
              объединения?
              <LI>Для моделирования каких данных целесообразно использовать 
              массив объединений?
              <LI>С какой целью объединения включаются в структуру в качестве ее 
              полей?
              <LI>Как и с какой целью объявляются переменные с изменяемой 
              структурой?</LI></OL>
            <DIV id=mark_157 class=lecture_mark></DIV></TD></TR>
        <TR>
          <TD height=8><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=8></TD></TR></TBODY></TABLE><!-- /content --></TD>
    <TD><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=8 height=1></TD></TR></TBODY></TABLE><!-- /bottom -->
<TABLE border=0 cellSpacing=0 cellPadding=0 width="100%">
  <TBODY>
  <TR>
    <TD class=orang height=1><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=1 height=1></TD></TR>
  <TR>
    <TD class=ltxt align=center>© INTUIT.ru, 2003-2010. Все права 
  защищены.</TD></TR></TBODY></TABLE><!-- /bottom -->
<SCRIPT type=text/javascript 
src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/urchin.js">
</SCRIPT>

<SCRIPT 
type=text/javascript>
_uacct = "UA-3475067-1";
urchinTracker();
</SCRIPT>
</BODY></HTML>
