<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0071)http://www.intuit.ru/department/algorithms/staldata/28/staldata_28.html -->
<HTML><HEAD><TITLE>INTUIT.ru::Интернет-Университет Информационных Технологий</TITLE>
<META content="text/html; charset=windows-1251" http-equiv=Content-Type><LINK 
rel=stylesheet type=text/css 
href="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/printable.css">
<META name=GENERATOR content="MSHTML 9.00.8080.16413"></HEAD>
<BODY leftMargin=6 topMargin=6 marginwidth="6" marginheight="6">
<DIV align=left><SPAN style="COLOR: #000000; FONT-WEIGHT: bold">&nbsp;&nbsp; 
<SPAN style="FONT-SIZE: 12pt">Интернет-Университет Информационных 
Технологий</SPAN> </SPAN></DIV>&nbsp;&nbsp; <SPAN 
style="COLOR: #330066; TEXT-DECORATION: underline" 
align="rright">http://www.INTUIT.ru</SPAN> 
<TABLE border=0 cellSpacing=0 cellPadding=0 width="100%">
  <TBODY>
  <TR>
    <TD height=8 colSpan=3><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=1 height=8></TD></TR>
  <TR>
    <TD class=orang height=1 colSpan=3><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=1 height=1></TD></TR>
  <TR>
    <TD height=8 colSpan=3><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=1 height=8></TD></TR>
  <TR vAlign=top>
    <TD><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=8 height=1></TD>
    <TD><!-- content -->
      <TABLE border=0 cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD class=head>Структуры и алгоритмы компьютерной обработки 
        данных</TD></TR>
        <TR>
          <TD height=4><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=4></TD></TR>
        <TR>
          <TD class=orang height=1><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=1></TD></TR>
        <TR>
          <TD height=8><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=8></TD></TR>
        <TR>
          <TD><SPAN class=headsub>28. Лекция: Динамические структуры данных: 
            версия для печати и PDA</SPAN> <BR><SPAN class=rtxt>В лекции 
            рассматриваются определение, способы объявления, инициализация 
            динамических структур, методы доступа к данным динамических 
            структур, размещение их в памяти, преимущества и недостатки 
            использования динамических структур в программах. </SPAN></TD></TR>
        <TR>
          <TD height=8><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=8></TD></TR>
        <TR>
          <TD class=orang height=1><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=1></TD></TR>
        <TR>
          <TD height=8><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=8></TD></TR>
        <TR>
          <TD><A name=sect1></A>
            <H3></H3>
            <P id=id_1><B>Цель лекции:</B> изучить понятия, классификацию, 
            объявления и особенности доступа к данным в динамических структурах, 
            работу с памятью при использовании структур в программе, научиться 
            решать задачи с использованием динамических структур в языке 
C++.</P>
            <DIV id=mark_1 class=lecture_mark></DIV>
            <P id=id_2>В языке C++ имеются средства создания динамических 
            структур данных, которые позволяют во время выполнения программы 
            образовывать объекты, выделять для них память, освобождать память, 
            когда в них исчезает необходимость.</P>
            <DIV id=mark_2 class=lecture_mark></DIV>
            <P id=id_3>Если до начала работы с данными невозможно определить, 
            сколько памяти потребуется для их хранения, память следует 
            распределять во время выполнения программы по мере необходимости 
            отдельными блоками. Блоки связываются друг с другом с помощью 
            указателей. Такой способ организации данных называется динамической 
            структурой данных, поскольку она размещается в динамической памяти и 
            ее размер изменяется во время выполнения программы.</P>
            <DIV id=mark_3 class=lecture_mark></DIV>
            <P id=id_4><B>Динамические структуры данных</B> – это структуры 
            данных, память под которые выделяется и освобождается по мере 
            необходимости.</P>
            <DIV id=mark_4 class=lecture_mark></DIV>
            <P id=id_5>Динамические структуры данных в процессе существования в 
            памяти могут изменять не только число составляющих их элементов, но 
            и характер связей между элементами. При этом не учитывается 
            изменение содержимого самих элементов данных. Такая особенность 
            динамических структур, как непостоянство их размера и характера 
            отношений между элементами, приводит к тому, что на этапе создания 
            машинного кода программа-компилятор не может выделить для всей 
            структуры в целом участок памяти фиксированного размера, а также не 
            может сопоставить с отдельными компонентами структуры конкретные 
            адреса. Для решения проблемы адресации динамических структур данных 
            используется метод, называемый <SPAN 
            class=xml_em_italic>динамическим распределением памяти</SPAN>, то 
            есть память под отдельные элементы выделяется в момент, когда они 
            "начинают существовать" в процессе выполнения программы, а не во 
            время компиляции. Компилятор в этом случае выделяет фиксированный 
            объем памяти для хранения адреса динамически размещаемого элемента, 
            а не самого элемента.</P>
            <DIV id=mark_5 class=lecture_mark></DIV>
            <P id=id_6>Динамическая структура данных характеризуется тем 
что:</P>
            <DIV id=mark_6 class=lecture_mark></DIV>
            <UL id=id_7>
              <LI>она не имеет имени;
              <LI>ей выделяется память в процессе выполнения программы;
              <LI>количество элементов структуры может не фиксироваться;
              <LI>размерность структуры может меняться в процессе выполнения 
              программы;
              <LI>в процессе выполнения программы может меняться характер 
              взаимосвязи между элементами структуры.</LI></UL>
            <DIV id=mark_7 class=lecture_mark></DIV>
            <P id=id_13>Каждой динамической структуре данных сопоставляется 
            статическая переменная типа указатель (ее значение – адрес этого 
            объекта), посредством которой осуществляется доступ к динамической 
            структуре.</P>
            <DIV id=mark_13 class=lecture_mark></DIV>
            <P id=id_14>Сами динамические величины не требуют описания в 
            программе, поскольку во время компиляции память под них не 
            выделяется. Во время компиляции память выделяется только под 
            статические величины. Указатели – это статические величины, поэтому 
            они требуют описания.</P>
            <DIV id=mark_14 class=lecture_mark></DIV>
            <P id=id_15>Необходимость в динамических структурах данных обычно 
            возникает в следующих случаях.</P>
            <DIV id=mark_15 class=lecture_mark></DIV>
            <UL id=id_16>
              <LI>Используются переменные, имеющие довольно большой размер 
              (например, массивы большой размерности), необходимые в одних 
              частях программы и совершенно не нужные в других. 
              <LI>В процессе работы программы нужен массив, список или иная 
              структура, размер которой изменяется в широких пределах и трудно 
              предсказуем. 
              <LI>Когда размер данных, обрабатываемых в программе, превышает 
              объем сегмента данных. </LI></UL>
            <DIV id=mark_16 class=lecture_mark></DIV>
            <P id=id_20>Динамические структуры, по определению, характеризуются 
            отсутствием физической смежности элементов структуры в памяти, 
            непостоянством и непредсказуемостью размера (числа элементов) 
            структуры в процессе ее обработки.</P>
            <DIV id=mark_20 class=lecture_mark></DIV>
            <P id=id_21>Поскольку элементы динамической структуры располагаются 
            по непредсказуемым адресам памяти, адрес элемента такой структуры не 
            может быть вычислен из адреса начального или предыдущего элемента. 
            Для установления связи между элементами динамической структуры 
            используются указатели, через которые устанавливаются явные связи 
            между элементами. Такое представление данных в памяти называется 
            <SPAN class=xml_em_italic>связным</SPAN>.</P>
            <DIV id=mark_21 class=lecture_mark></DIV>
            <P id=id_22>Достоинства связного представления данных – в 
            возможности обеспечения значительной изменчивости структур:</P>
            <DIV id=mark_22 class=lecture_mark></DIV>
            <UL id=id_23>
              <LI>размер структуры ограничивается только доступным объемом 
              машинной памяти; 
              <LI>при изменении логической последовательности элементов 
              структуры требуется не перемещение данных в памяти, а только 
              коррекция указателей;
              <LI>большая гибкость структуры.</LI></UL>
            <DIV id=mark_23 class=lecture_mark></DIV>
            <P id=id_27>Вместе с тем, связное представление не лишено и 
            недостатков, основными из которых являются следующие:</P>
            <DIV id=mark_27 class=lecture_mark></DIV>
            <UL id=id_28>
              <LI>на поля, содержащие указатели для связывания элементов друг с 
              другом, расходуется дополнительная память;
              <LI>доступ к элементам связной структуры может быть менее 
              эффективным по времени.</LI></UL>
            <DIV id=mark_28 class=lecture_mark></DIV>
            <P id=id_31>Последний недостаток является наиболее серьезным и 
            именно им ограничивается применимость связного представления данных. 
            Если в смежном представлении данных для вычисления адреса любого 
            элемента нам во всех случаях достаточно было номера элемента и 
            информации, содержащейся в дескрипторе структуры, то для связного 
            представления адрес элемента не может быть вычислен из исходных 
            данных. Дескриптор связной структуры содержит один или несколько 
            указателей, позволяющих войти в структуру, далее поиск требуемого 
            элемента выполняется следованием по цепочке указателей от элемента к 
            элементу. Поэтому связное представление практически никогда не 
            применяется в задачах, где логическая структура данных имеет вид 
            вектора или массива – с доступом по номеру элемента, но часто 
            применяется в задачах, где логическая структура требует другой 
            исходной информации доступа (таблицы, списки, деревья и т.д.).</P>
            <DIV id=mark_31 class=lecture_mark></DIV>
            <P id=id_32>Порядок работы с динамическими структурами данных 
            следующий:</P>
            <DIV id=mark_32 class=lecture_mark></DIV>
            <OL id=id_33>
              <LI>создать (отвести место в динамической памяти);
              <LI>работать при помощи указателя;
              <LI>удалить (освободить занятое структурой место).</LI></OL>
            <DIV id=mark_33 class=lecture_mark></DIV><A name=sect2></A>
            <H3>Классификация динамических структур данных</H3>
            <P id=id_37>Во многих задачах требуется использовать данные, у 
            которых конфигурация, размеры и состав могут меняться в процессе 
            выполнения программы. Для их представления используют динамические 
            информационные структуры. К таким структурам относят:</P>
            <DIV id=mark_37 class=lecture_mark></DIV>
            <UL id=id_38>
              <LI>однонаправленные (односвязные) списки;
              <LI>двунаправленные (двусвязные) списки;
              <LI>циклические списки;
              <LI>стек;
              <LI>дек;
              <LI>очередь;
              <LI>бинарные деревья.</LI></UL>
            <DIV id=mark_38 class=lecture_mark></DIV>
            <P id=id_46>Они отличаются способом связи отдельных элементов и/или 
            допустимыми операциями. Динамическая структура может занимать 
            несмежные участки оперативной памяти.</P>
            <DIV id=mark_46 class=lecture_mark></DIV>
            <P id=id_47>Динамические структуры широко применяют и для более 
            эффективной работы с данными, размер которых известен, особенно для 
            решения задач сортировки.</P>
            <DIV id=mark_47 class=lecture_mark></DIV><A name=sect3></A>
            <H3>Объявление динамических структур данных</H3>
            <P id=id_48>Каждая компонента любой динамической структуры 
            представляет собой запись, содержащую, по крайней мере, два поля: 
            одно поле типа указатель, а второе – для размещения данных. В общем 
            случае запись может содержать не один, а несколько указателей и 
            несколько полей данных. Поле данных может быть переменной, массивом 
            или структурой. Для наилучшего представления изобразим отдельную 
            компоненту в виде:</P>
            <DIV id=mark_48 class=lecture_mark></DIV>
            <P id=id_49 align=left><A></A>
            <DIV><IMG alt="" 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/28_001.png"></DIV><BR>
            <P></P>
            <DIV id=mark_49 class=lecture_mark></DIV>
            <P id=id_50>где поле <SPAN class=texample>Р</SPAN> – указатель; поле 
            <SPAN class=texample>D</SPAN> – данные.</P>
            <DIV id=mark_50 class=lecture_mark></DIV>
            <P id=id_53>Элемент динамической структуры состоит из двух 
полей:</P>
            <DIV id=mark_53 class=lecture_mark></DIV>
            <UL id=id_54>
              <LI><SPAN class=xml_em_italic>информационного поля</SPAN> (поля 
              данных), в котором содержатся те данные, ради которых и создается 
              структура; в общем случае информационное поле само является 
              интегрированной структурой – вектором, массивом, другой 
              динамической структурой и т.п.; 
              <LI><SPAN class=xml_em_italic>адресного поля</SPAN> (поля связок), 
              в котором содержатся один или несколько указателей, связывающий 
              данный элемент с другими элементами структуры;</LI></UL>
            <DIV id=mark_54 class=lecture_mark></DIV>
            <P id=id_57>Объявление элемента динамической структуры данных 
            выглядит следующим образом:</P>
            <DIV id=mark_57 class=lecture_mark></DIV>
            <DIV class=example><PRE>struct имя_типа {
                 информационное поле;
                 адресное поле;
                };
</PRE></DIV>
            <P id=id_59>Например:</P>
            <DIV id=mark_59 class=lecture_mark></DIV>
            <DIV class=example><PRE>struct TNode {
              int Data;//информационное поле
              TNode *Next;//адресное поле
            };
</PRE></DIV>
            <P id=id_61>Информационных и адресных полей может быть как одно, так 
            и несколько.</P>
            <DIV id=mark_61 class=lecture_mark></DIV>
            <P id=id_62>Рассмотрим в качестве примера динамическую структуру, 
            схематично указанную на <A 
            href="http://www.intuit.ru/department/algorithms/staldata/28/staldata_28.html#image.28.1">рис. 
            28.1</A>:</P>
            <DIV id=mark_62 class=lecture_mark></DIV>
            <P id=id_63 align=left><A name=image.28.1></A>
            <DIV><IMG alt="Схематичное представление динамической структуры" 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/28_01.png" 
            width=456 height=113></DIV><BR><B>Рис. 28.1.</B>&nbsp; Схематичное 
            представление динамической структуры
            <P></P>
            <DIV id=mark_63 class=lecture_mark></DIV>
            <P id=id_64>Данная структура состоит из 4 элементов. Ее первый 
            элемент имеет поле <SPAN class=texample>Data</SPAN>, равное 73, и 
            связан с помощью своего поля <SPAN class=texample>Next</SPAN> со 
            вторым элементом, поле <SPAN class=texample>Data</SPAN> которого 
            равно 28, и так далее до последнего, четвертого элемента, поле <SPAN 
            class=texample>Data</SPAN> которого равно 85, а поле <SPAN 
            class=texample>Next</SPAN> равно <SPAN class=texample>NULL</SPAN>, 
            то есть нулевому адресу, что является признаком завершения 
            структуры. Здесь <SPAN class=texample>P</SPAN> является указателем, 
            который указывает на первый элемент структуры.</P>
            <DIV id=mark_64 class=lecture_mark></DIV><A name=sect4></A>
            <H3>Доступ к данным в динамических структурах</H3>
            <P id=id_72>Элемент динамической структуры в каждый момент может 
            либо существовать, либо отсутствовать в памяти, поэтому его называют 
            <SPAN class=xml_em_italic>динамическим</SPAN>. Поскольку элементами 
            динамической структуры являются динамические переменные, то 
            единственным средством доступа к динамическим структурам и их 
            элементам является указатель (адрес) на место их текущего 
            расположения в памяти. Таким образом, доступ к динамическим данным 
            выполняется специальным образом с помощью указателей.</P>
            <DIV id=mark_72 class=lecture_mark></DIV>
            <P id=id_73>Указатель содержит адрес определенного объекта в 
            динамической памяти. Адрес формируется из двух слов: адрес сегмента 
            и смещение. Сам указатель является статическим объектом и расположен 
            в сегменте данных (<A 
            href="http://www.intuit.ru/department/algorithms/staldata/28/staldata_28.html#image.28.2">рис. 
            28.2</A>). </P>
            <DIV id=mark_73 class=lecture_mark></DIV>
            <P id=id_74 align=left><A name=image.28.2></A>
            <DIV><IMG alt="Связь указателя с адресуемым объектом" 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/28_02.png" 
            width=397 height=115></DIV><BR><B>Рис. 28.2.</B>&nbsp; Связь 
            указателя с адресуемым объектом
            <P></P>
            <DIV id=mark_74 class=lecture_mark></DIV>
            <P id=id_75>Для обращения к динамической структуре достаточно 
            хранить в памяти адрес первого элемента структуры. Поскольку каждый 
            элемент динамической структуры хранит адрес следующего за ним 
            элемента, можно, двигаясь от начального элемента по адресам, 
            получить доступ к любому элементу данной структуры.</P>
            <DIV id=mark_75 class=lecture_mark></DIV>
            <P id=id_76>Доступ к данным в динамических структурах осуществляется 
            с помощью операции "стрелка" (<SPAN class=texample>-&gt;</SPAN>), 
            которую называют операцией косвенного выбора элемента структурного 
            объекта, адресуемого указателем. Она обеспечивает доступ к элементу 
            структуры через адресующий ее указатель того же структурного типа. 
            Формат применения данной операции следующий:</P>
            <DIV id=mark_76 class=lecture_mark></DIV>
            <DIV class=example><PRE>УказательНаСтруктуру-&gt; ИмяЭлемента
</PRE></DIV>
            <P id=id_79>Операции "стрелка" (<SPAN class=texample>-&gt;</SPAN>) 
            двуместная. Применяется для доступа к элементу, задаваемому правым 
            операндом, той структуры, которую адресует левый операнд. В качестве 
            левого операнда должен быть указатель на структуру, а в качестве 
            правого – имя элемента этой структуры.</P>
            <DIV id=mark_79 class=lecture_mark></DIV>
            <P id=id_81>Например:</P>
            <DIV id=mark_81 class=lecture_mark></DIV>
            <DIV class=example><PRE>p-&gt;Data;
p-&gt;Next;
</PRE></DIV>
            <P id=id_83>Имея возможность явного манипулирования с указателями, 
            которые могут располагаться как вне структуры, так и "внутри" 
            отдельных ее элементов, можно создавать в памяти различные 
            структуры.</P>
            <DIV id=mark_83 class=lecture_mark></DIV>
            <P id=id_84>Однако необходимо помнить, что работа с динамическими 
            данными замедляет выполнение программы, поскольку доступ к величине 
            происходит в два шага: сначала ищется указатель, затем по нему – 
            величина.</P>
            <DIV id=mark_84 class=lecture_mark></DIV><A name=sect5></A>
            <H3>Работа с памятью при использовании динамических структур</H3>
            <P id=id_85>В программах, в которых необходимо использовать 
            динамические структуры данных, работа с памятью происходит 
            стандартным образом. Выделение динамической памяти производится с 
            помощью операции <SPAN class=texample>new</SPAN> или с помощью 
            библиотечной функции <SPAN class=texample>malloc (calloc)</SPAN>. 
            Освобождение динамической памяти осуществляется операцией <SPAN 
            class=texample>delete</SPAN> или функцией <SPAN 
            class=texample>free</SPAN>.</P>
            <DIV id=mark_85 class=lecture_mark></DIV>
            <P id=id_90>Например, объявим динамическую структуру данных с именем 
            <SPAN class=texample>Node</SPAN> с полями <SPAN 
            class=texample>Name</SPAN>, <SPAN class=texample>Value</SPAN> и 
            <SPAN class=texample>Next</SPAN>, выделим память под указатель на 
            структуру, присвоим значения элементам структуры и освободим 
            память.</P>
            <DIV id=mark_90 class=lecture_mark></DIV>
            <DIV class=example><PRE>struct Node {char *Name;
             int Value;
             Node *Next
            };
Node *PNode; //объявляется указатель

PNode = new Node; //выделяется память

PNode-&gt;Name = "STO"; //присваиваются значения
PNode-&gt;Value = 28;
PNode-&gt;Next = NULL;

delete PNode; // освобождение памяти 
</PRE></DIV><A name=sect6></A>
            <H3>Ключевые термины</H3>
            <P id=id_96><B>Адрес сегмента</B> – это одно из машинных слов, 
            составляющих адрес динамического элемента, которое представляет 
            собой адрес первого элемента структуры.</P>
            <DIV id=mark_96 class=lecture_mark></DIV>
            <P id=id_97><B>Адресное поле (поле связок)</B> – это поле структуры, 
            в котором содержится указатель, связывающий данный элемент с другими 
            элементами структуры.</P>
            <DIV id=mark_97 class=lecture_mark></DIV>
            <P id=id_98><B>Динамические структуры данных</B> – это структуры 
            данных, память под которые выделяется и освобождается не на этапе 
            компиляции, а в процессе работы программы.</P>
            <DIV id=mark_98 class=lecture_mark></DIV>
            <P id=id_99><B>Динамический элемент</B> – это элемент динамической 
            структуры, который в конкретный момент выполнения программы может 
            либо существовать, либо отсутствовать в памяти.</P>
            <DIV id=mark_99 class=lecture_mark></DIV>
            <P id=id_100><B>Динамическое распределение памяти</B> – это 
            выделение памяти под отдельные элементы в тот момент, когда они 
            "начинают существовать" в процессе выполнения программы.</P>
            <DIV id=mark_100 class=lecture_mark></DIV>
            <P id=id_101><B>Информационное поле (поле данных)</B> – это поле 
            структуры, в котором содержатся непосредственно обрабатываемые 
            данные. </P>
            <DIV id=mark_101 class=lecture_mark></DIV>
            <P id=id_102><B>Связное представление данных</B> – это установление 
            связи между элементами динамической структуры через указатели.</P>
            <DIV id=mark_102 class=lecture_mark></DIV>
            <P id=id_103><B>Смещение</B> – это одно из машинных слов, 
            составляющих адрес динамического элемента, которое представляет 
            собой изменение адреса относительно первого элемента структуры.</P>
            <DIV id=mark_103 class=lecture_mark></DIV><A name=sect7></A>
            <H3>Краткие итоги</H3>
            <OL id=id_104>
              <LI>В программах возникает необходимость обрабатывать данные, 
              размер которых заранее неизвестен.
              <LI>Для данных с достаточно большим или переменным размером 
              используются динамические структуры. 
              <LI>Динамические структуры не имеют имени, под них выделяется 
              память в процессе выполнения программы, количество их элементов 
              может не фиксироваться, в процессе выполнения программы может 
              меняться характер взаимосвязи между элементами структуры.
              <LI>Каждой динамической структуре ставится в соответствие 
              статическая переменная – ее адрес.
              <LI>Представление динамических структур в памяти определяется как 
              связное.
              <LI>Связное представление данных в программах имеет как 
              достоинства, так и недостатки.
              <LI>Существует классификация динамических структур данных в 
              зависимости от связей между элементами и допустимых операций.
              <LI>Элемент динамической структуры состоит как минимум из двух 
              полей: адресного и информационного.
              <LI>Адресное поле формируется из двух слов: адрес сегмента и 
              смещение.
              <LI>Доступ к данным в динамических структурах осуществляется с 
              помощью операции косвенного выбора.</LI></OL>
            <DIV id=mark_104 class=lecture_mark></DIV><A name=sect8></A>
            <H3>Лабораторная работа 28. Динамические структуры данных</H3>
            <P id=id_115><B>Цель работы:</B> изучить понятия, классификацию, 
            объявления и особенности доступа к данным в динамических структурах, 
            работу с памятью при использовании структур в программе, научиться 
            решать задачи с использованием динамических структур в языке 
C++.</P>
            <DIV id=mark_115 class=lecture_mark></DIV>
            <P id=id_116>При выполнении лабораторной работы для каждого задания 
            требуется написать программу на языке С++, в которой выполнена 
            разработка динамической структуры в соответствии с постановкой 
            задачи, ввод данных элементов структурного типа, их обработка и 
            вывод на экран в указанном формате. Для хранения данных структуры 
            следует использовать ресурсы динамической памяти. Ввод данных 
            осуществляется с клавиатуры с учетом требований к входным данным, 
            содержащихся в постановке задачи. Ограничениями на входные данные 
            являются диапазоны числовых типов полей структуры и допустимый 
            размер области динамической памяти в языке С++.</P>
            <DIV id=mark_116 class=lecture_mark></DIV>
            <P id=id_117><B>Теоретические сведения.</B></P>
            <DIV id=mark_117 class=lecture_mark></DIV>
            <P id=id_118>Ознакомьтесь с материалом лекции 28.</P>
            <DIV id=mark_118 class=lecture_mark></DIV>
            <P id=id_119><B>Задания к лабораторной работе.</B></P>
            <DIV id=mark_119 class=lecture_mark></DIV>
            <P id=id_120>Выполните приведенные ниже задания.</P>
            <DIV id=mark_120 class=lecture_mark></DIV>
            <OL id=id_121>
              <LI>Разработайте динамическую структуру для решения задачи. 
              Последовательность чисел Фибоначчи задается по закономерности: 
              <SPAN class=texample>f<SUB>1</SUB> = 1, f<SUB>2</SUB> = 1, ..., 
              f<SUB>n</SUB> = f<SUB>n-1</SUB> + f<SUB>n-2</SUB></SPAN>. 
              Распечатайте <SPAN class=texample>n</SPAN> чисел Фибоначчи в 
              следующем порядке: сначала все четные, затем все нечетные 
элементы.
              <LI>Разработайте динамическую структуру для решения задачи. Даны 
              целые числа <SPAN class=texample>p</SPAN> и <SPAN 
              class=texample>q</SPAN>. Получить все делители числа <SPAN 
              class=texample>q</SPAN>, взаимно простые с числом <SPAN 
              class=texample>p</SPAN>.
              <LI>Разработайте динамическую структуру для решения задачи. Дана 
              последовательность из <SPAN class=texample>n</SPAN> целых чисел. 
              Получите количество чисел последовательности, которые встречаются 
              в ней ровно один раз. Распечатайте найденные числа.
              <LI>Разработайте динамическую структуру для решения задачи. На 
              шахматной доске каждая клетка описывается двумя координатами: 
              номером строки и номером столбца. Ферзь ставится на одну из 
              клеток. Найдите количество и координаты всех клеток, которые 
              "бьет" ферзь. </LI></OL>
            <DIV id=mark_121 class=lecture_mark></DIV>
            <P id=id_133><B>Указания к выполнению работы.</B></P>
            <DIV id=mark_133 class=lecture_mark></DIV>
            <P id=id_134>Каждое задание необходимо решить в соответствии с 
            изученными методами объявления и обработки данных динамических 
            структур в языке С++. При объявлении структурного типа выполните 
            комментирование используемых полей структуры. Программу для решения 
            каждого задания необходимо разработать методом процедурной 
            абстракции, оформив комментарии к коду.</P>
            <DIV id=mark_134 class=lecture_mark></DIV>
            <P id=id_135>Следует реализовать каждое задание в соответствии с 
            приведенными этапами:</P>
            <DIV id=mark_135 class=lecture_mark></DIV>
            <UL id=id_136>
              <LI>изучить словесную постановку задачи, выделив при этом все виды 
              данных;
              <LI>сформулировать математическую постановку задачи;
              <LI>выбрать метод решения задачи, если это необходимо;
              <LI>разработать графическую схему алгоритма;
              <LI>записать разработанный алгоритм на языке С++;
              <LI>разработать контрольный тест к программе;
              <LI>отладить программу;
              <LI>представить отчет по работе.</LI></UL>
            <DIV id=mark_136 class=lecture_mark></DIV>
            <P id=id_145><B>Требования к отчету.</B></P>
            <DIV id=mark_145 class=lecture_mark></DIV>
            <P id=id_146>Отчет по лабораторной работе должен соответствовать 
            следующей структуре.</P>
            <DIV id=mark_146 class=lecture_mark></DIV>
            <UL id=id_147>
              <LI>Титульный лист.
              <LI>Словесная постановка задачи. В этом подразделе проводится 
              полное описание задачи. Описывается суть задачи, анализ входящих в 
              нее физических величин, область их допустимых значений, единицы их 
              измерения, возможные ограничения, анализ условий при которых 
              задача имеет решение (не имеет решения), анализ ожидаемых 
              результатов.
              <LI>Математическая модель. В этом подразделе вводятся 
              математические описания физических величин и математическое 
              описание их взаимодействий. Цель подраздела – представить решаемую 
              задачу в математической формулировке.
              <LI>Алгоритм решения задачи. В подразделе описывается разработка 
              структуры алгоритма, обосновывается абстракция данных, задача 
              разбивается на подзадачи. Схема алгоритма выполняется по ЕСПД 
              (ГОСТ 19.003-80 и ГОСТ 19.002-80).
              <LI>Листинг программы. Подраздел должен содержать текст программы 
              на языке программирования С++, реализованный в среде MS Visual 
              Studio 2010.
              <LI>Контрольный тест. Подраздел содержит наборы исходных данных и 
              полученные в ходе выполнения программы результаты.
              <LI>Выводы по лабораторной работе.
              <LI>Ответы на контрольные вопросы.</LI></UL>
            <DIV id=mark_147 class=lecture_mark></DIV>
            <P id=id_156><B>Контрольные вопросы</B></P>
            <DIV id=mark_156 class=lecture_mark></DIV>
            <OL id=id_157>
              <LI>Почему в программах размер памяти под статические переменные 
              должен быть определен на этапе компиляции?
              <LI>За счет каких ресурсов выделяется память под динамические 
              структуры?
              <LI>Почему динамические структуры не требуют собственного описания 
              в программе?
              <LI>Как располагаются в памяти динамические величины?
              <LI>Как осуществляется доступ к динамическим структурам из 
              программного кода?
              <LI>Как связываются между собой элементы динамической структуры?
              <LI>В чем основное отличие смежного и связного представления 
              данных?
              <LI>Какого типа может быть поле данных в динамической структуре?
              <LI>Почему для обращения к динамической структуре достаточно 
              хранить в памяти адрес ее первого элемента?
              <LI>За счет чего работа с динамическими данными замедляет 
              выполнение программы?</LI></OL>
            <DIV id=mark_157 class=lecture_mark></DIV></TD></TR>
        <TR>
          <TD height=8><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=8></TD></TR></TBODY></TABLE><!-- /content --></TD>
    <TD><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=8 height=1></TD></TR></TBODY></TABLE><!-- /bottom -->
<TABLE border=0 cellSpacing=0 cellPadding=0 width="100%">
  <TBODY>
  <TR>
    <TD class=orang height=1><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=1 height=1></TD></TR>
  <TR>
    <TD class=ltxt align=center>© INTUIT.ru, 2003-2010. Все права 
  защищены.</TD></TR></TBODY></TABLE><!-- /bottom -->
<SCRIPT type=text/javascript 
src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/urchin.js">
</SCRIPT>

<SCRIPT 
type=text/javascript>
_uacct = "UA-3475067-1";
urchinTracker();
</SCRIPT>
</BODY></HTML>
