<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0071)http://www.intuit.ru/department/algorithms/staldata/26/staldata_26.html -->
<HTML><HEAD><TITLE>INTUIT.ru::Интернет-Университет Информационных Технологий</TITLE>
<META content="text/html; charset=windows-1251" http-equiv=Content-Type><LINK 
rel=stylesheet type=text/css 
href="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/printable.css">
<META name=GENERATOR content="MSHTML 9.00.8080.16413"></HEAD>
<BODY leftMargin=6 topMargin=6 marginwidth="6" marginheight="6">
<DIV align=left><SPAN style="COLOR: #000000; FONT-WEIGHT: bold">&nbsp;&nbsp; 
<SPAN style="FONT-SIZE: 12pt">Интернет-Университет Информационных 
Технологий</SPAN> </SPAN></DIV>&nbsp;&nbsp; <SPAN 
style="COLOR: #330066; TEXT-DECORATION: underline" 
align="rright">http://www.INTUIT.ru</SPAN> 
<TABLE border=0 cellSpacing=0 cellPadding=0 width="100%">
  <TBODY>
  <TR>
    <TD height=8 colSpan=3><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=1 height=8></TD></TR>
  <TR>
    <TD class=orang height=1 colSpan=3><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=1 height=1></TD></TR>
  <TR>
    <TD height=8 colSpan=3><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=1 height=8></TD></TR>
  <TR vAlign=top>
    <TD><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=8 height=1></TD>
    <TD><!-- content -->
      <TABLE border=0 cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD class=head>Структуры и алгоритмы компьютерной обработки 
        данных</TD></TR>
        <TR>
          <TD height=4><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=4></TD></TR>
        <TR>
          <TD class=orang height=1><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=1></TD></TR>
        <TR>
          <TD height=8><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=8></TD></TR>
        <TR>
          <TD><SPAN class=headsub>26. Лекция: Двумерные динамические массивы: 
            версия для печати и PDA</SPAN> <BR><SPAN class=rtxt>В лекции 
            рассматриваются определение, объявления, инициализация двумерных 
            динамических массивов, способы и этапы выделения и освобождения 
            динамической памяти под двумерный массив, доступ к элементам 
            двумерного динамического массива. </SPAN></TD></TR>
        <TR>
          <TD height=8><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=8></TD></TR>
        <TR>
          <TD class=orang height=1><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=1></TD></TR>
        <TR>
          <TD height=8><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=8></TD></TR>
        <TR>
          <TD><A name=sect1></A>
            <H3></H3>
            <P id=id_1><B>Цель лекции:</B> изучить объявление, выделение и 
            освобождение памяти под двумерные динамические массивы, обращение к 
            элементам, научиться решать задачи с использованием двумерных 
            динамических массивов на языке C++.</P>
            <DIV id=mark_1 class=lecture_mark></DIV>
            <P id=id_2>Под <SPAN class=xml_em_italic>двумерным массивом</SPAN> 
            понимается одномерный массив, элементами которого являются 
            одномерные массивы. Другими словами, это набор однотипных данных, 
            имеющий общее имя, и доступ к элементам которого осуществляется по 
            двум индексам. Иногда двумерный массив также называют <SPAN 
            class=xml_em_italic>матрицей</SPAN>.</P>
            <DIV id=mark_2 class=lecture_mark></DIV>
            <P id=id_3><B>Динамическим массивом</B> называют массив с переменным 
            размером, то есть количество элементов может изменяться во время 
            выполнения программы. </P>
            <DIV id=mark_3 class=lecture_mark></DIV>
            <P id=id_4>Для создания двумерного динамического массива вначале 
            нужно распределить память для массива указателей на одномерные 
            массивы, а затем выделить память для одномерных массивов. При 
            динамическом распределении памяти для массивов следует описать 
            соответствующий указатель, которому будет присвоено значение адреса 
            начала области выделенной памяти.</P>
            <DIV id=mark_4 class=lecture_mark></DIV><A name=sect2></A>
            <H3>Объявление двумерных динамических массивов</H3>
            <P id=id_5>Под объявлением двумерного динамического массива понимают 
            объявление двойного указателя, то есть объявление указателя на 
            указатель.</P>
            <DIV id=mark_5 class=lecture_mark></DIV>
            <P id=id_6>Синтаксис:</P>
            <DIV id=mark_6 class=lecture_mark></DIV>
            <DIV class=example><PRE>Тип ** ИмяМассива;
</PRE></DIV>
            <P id=id_8><SPAN class=texample>ИмяМассива</SPAN> – идентификатор 
            массива, то есть имя двойного указателя для выделяемого блока 
            памяти.</P>
            <DIV id=mark_8 class=lecture_mark></DIV>
            <P id=id_10><SPAN class=texample>Тип</SPAN> – тип элементов 
            объявляемого динамического массива. Элементами динамического массива 
            не могут быть функции и элементы типа <SPAN 
            class=texample>void</SPAN>.</P>
            <DIV id=mark_10 class=lecture_mark></DIV>
            <P id=id_13>Например:</P>
            <DIV id=mark_13 class=lecture_mark></DIV>
            <DIV class=example><PRE>int **a; 
float **m;
</PRE></DIV><A name=sect3></A>
            <H3>Выделение памяти под двумерный динамический массив</H3>
            <P id=id_15>При формировании двумерного динамического массива 
            сначала выделяется память для массива указателей на одномерные 
            массивы, а затем в цикле с параметром выделяется память под 
            одномерные массивы. На <A 
            href="http://www.intuit.ru/department/algorithms/staldata/26/staldata_26.html#image.26.1">рис. 
            26.1</A> представлена схема динамической области памяти, выделенной 
            под двумерный массив.</P>
            <DIV id=mark_15 class=lecture_mark></DIV>
            <P id=id_16 align=left><A name=image.26.1></A>
            <DIV><IMG alt="Выделение памяти под двумерный массив" 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/26_01.png" 
            width=470 height=260></DIV><BR><B>Рис. 26.1.</B>&nbsp; Выделение 
            памяти под двумерный массив
            <P></P>
            <DIV id=mark_16 class=lecture_mark></DIV>
            <P id=id_17>При работе с динамической памятью в языке С++ существует 
            2 способа выделения памяти под двумерный динамический массив.</P>
            <DIV id=mark_17 class=lecture_mark></DIV>
            <P id=id_18>1) <SPAN class=xml_em_italic>при помощи операции</SPAN> 
            <SPAN class=texample>new</SPAN>, которая позволяет выделить в 
            динамической памяти участок для размещения массива соответствующего 
            типа, но не позволяет его инициализировать.</P>
            <DIV id=mark_18 class=lecture_mark></DIV>
            <P id=id_20>Синтаксис выделения памяти под массив указателей:</P>
            <DIV id=mark_20 class=lecture_mark></DIV>
            <DIV class=example><PRE>ИмяМассива = new Тип * [ВыражениеТипаКонстанты];
</PRE></DIV>
            <P id=id_22>Синтаксис выделения памяти для массива значений:</P>
            <DIV id=mark_22 class=lecture_mark></DIV>
            <DIV class=example><PRE>ИмяМассива[ЗначениеИндекса] = new Тип [ВыражениеТипа
Константы];
</PRE></DIV>
            <P id=id_24><SPAN class=texample>ИмяМассива</SPAN> – идентификатор 
            массива, то есть имя двойного указателя для выделяемого блока 
            памяти.</P>
            <DIV id=mark_24 class=lecture_mark></DIV>
            <P id=id_26><SPAN class=texample>Тип</SPAN> – тип указателя на 
            массив.</P>
            <DIV id=mark_26 class=lecture_mark></DIV>
            <P id=id_28><SPAN class=texample>ВыражениеТипаКонстанты</SPAN> – 
            задает количество элементов (размерность) массива. Выражение 
            константного типа вычисляется на этапе компиляции.</P>
            <DIV id=mark_28 class=lecture_mark></DIV>
            <P id=id_30>Например:</P>
            <DIV id=mark_30 class=lecture_mark></DIV>
            <DIV class=example><PRE>int n, m;//n и m – количество строк и столбцов матрицы 
float **matr; //указатель для массива указателей
matr = new float * [n]; //выделение динамической памяти 
                          под массив указателей
for (int i=0; i&lt;n; i++)
  matr[i] = new float [m]; //выделение динамической памяти 
                           для массива значений
</PRE></DIV>
            <P id=id_32>При выделении динамической памяти размеры массивов 
            должны быть полностью определены.</P>
            <DIV id=mark_32 class=lecture_mark></DIV>
            <P id=id_33>2) <SPAN class=xml_em_italic>при помощи библиотечной 
            функции</SPAN> <SPAN class=texample>malloc (calloc)</SPAN>, которая 
            предназначена для выделения динамической памяти.</P>
            <DIV id=mark_33 class=lecture_mark></DIV>
            <P id=id_35>Синтаксис выделения памяти под массив указателей:</P>
            <DIV id=mark_35 class=lecture_mark></DIV>
            <DIV class=example><PRE>ИмяМассива = (Тип **) malloc(N*sizeof(Тип *));
</PRE></DIV>
            <P id=id_37>или</P>
            <DIV id=mark_37 class=lecture_mark></DIV>
            <DIV class=example><PRE>ИмяМассива = (Тип **) calloc(N, sizeof(Тип *));
</PRE></DIV>
            <P id=id_39>Синтаксис выделения памяти для массива значений:</P>
            <DIV id=mark_39 class=lecture_mark></DIV>
            <DIV class=example><PRE>ИмяМассива[ЗначениеИндекса]=(Тип*)malloc(M*sizeof(Тип));
</PRE></DIV>
            <P id=id_41>или</P>
            <DIV id=mark_41 class=lecture_mark></DIV>
            <DIV class=example><PRE>ИмяМассива[ЗначениеИндекса]=(Тип*)calloc(M,sizeof(Тип));
</PRE></DIV>
            <P id=id_43><SPAN class=texample>ИмяМассива</SPAN> – идентификатор 
            массива, то есть имя двойного указателя для выделяемого блока 
            памяти.</P>
            <DIV id=mark_43 class=lecture_mark></DIV>
            <P id=id_45><SPAN class=texample>Тип</SPAN> – тип указателя на 
            массив. </P>
            <DIV id=mark_45 class=lecture_mark></DIV>
            <P id=id_47><SPAN class=texample>N</SPAN> – количество строк 
            массива;</P>
            <DIV id=mark_47 class=lecture_mark></DIV>
            <P id=id_49><SPAN class=texample>M</SPAN> – количество столбцов 
            массива.</P>
            <DIV id=mark_49 class=lecture_mark></DIV>
            <P id=id_51>Например:</P>
            <DIV id=mark_51 class=lecture_mark></DIV>
            <DIV class=example><PRE>int n, m;//n и m – количество строк и столбцов матрицы 
float **matr; //указатель для массива указателей
matr = (float **) malloc(n*sizeof(float *)); 
//выделение динамической памяти под массив указателей
for (int i=0; i&lt;n; i++)
  matr[i] = (float *) malloc(m*sizeof(float));
  //выделение динамической памяти для массива значений
</PRE></DIV>
            <P id=id_53>Так как функция <SPAN class=texample>malloc 
            (calloc)</SPAN> возвращает нетипизированный указатель <SPAN 
            class=texample>void *</SPAN>, то необходимо выполнять его 
            преобразование в указатель объявленного типа.</P>
            <DIV id=mark_53 class=lecture_mark></DIV><A name=sect4></A>
            <H3>Освобождение памяти, выделенной под двумерный динамический 
            массив</H3>
            <P id=id_56>Удаление из динамической памяти двумерного массива 
            осуществляется в порядке, обратном его созданию, то есть сначала 
            освобождается память, выделенная под одномерные массивы с данными, а 
            затем память, выделенная под одномерные массив указателей.</P>
            <DIV id=mark_56 class=lecture_mark></DIV>
            <P id=id_57>Освобождение памяти, выделенной под двумерный 
            динамический массив, также осуществляется 2 способами.</P>
            <DIV id=mark_57 class=lecture_mark></DIV>
            <P id=id_58>1) <SPAN class=xml_em_italic>при помощи операции</SPAN> 
            <SPAN class=texample>delete</SPAN>, которая освобождает участок 
            памяти ранее выделенной операцией <SPAN 
            class=texample>new</SPAN>.</P>
            <DIV id=mark_58 class=lecture_mark></DIV>
            <P id=id_61>Синтаксис освобождения памяти, выделенной для массива 
            значений:</P>
            <DIV id=mark_61 class=lecture_mark></DIV>
            <DIV class=example><PRE>delete ИмяМассива [ЗначениеИндекса];
</PRE></DIV>
            <P id=id_63>Синтаксис освобождения памяти, выделенной под массив 
            указателей:</P>
            <DIV id=mark_63 class=lecture_mark></DIV>
            <DIV class=example><PRE>delete [] ИмяМассива;
</PRE></DIV>
            <P id=id_65><SPAN class=texample>ИмяМассива</SPAN> – идентификатор 
            массива, то есть имя двойного указателя для выделяемого блока 
            памяти.</P>
            <DIV id=mark_65 class=lecture_mark></DIV>
            <P id=id_67>Например:</P>
            <DIV id=mark_67 class=lecture_mark></DIV>
            <DIV class=example><PRE>for (int i=0; i&lt;n; i++)
  delete matr [i]; 
   //освобождает память, выделенную для массива значений 
delete [] matr;
//освобождает память, выделенную под массив указателей
</PRE></DIV>
            <P id=id_69>Квадратные скобки [] означают, что освобождается память, 
            занятая всеми элементами массива, а не только первым.</P>
            <DIV id=mark_69 class=lecture_mark></DIV>
            <P id=id_70>2) <SPAN class=xml_em_italic>при помощи библиотечной 
            функции</SPAN> <SPAN class=texample>free</SPAN>, которая 
            предназначена для освобождения динамической памяти.</P>
            <DIV id=mark_70 class=lecture_mark></DIV>
            <P id=id_72>Синтаксис освобождения памяти, выделенной для массива 
            значений:</P>
            <DIV id=mark_72 class=lecture_mark></DIV>
            <DIV class=example><PRE>free (ИмяМассива[ЗначениеИндекса]);
</PRE></DIV>
            <P id=id_74>Синтаксис освобождения памяти, выделенной под массив 
            указателей:</P>
            <DIV id=mark_74 class=lecture_mark></DIV>
            <DIV class=example><PRE>free (ИмяМассива);
</PRE></DIV>
            <P id=id_76><SPAN class=texample>ИмяМассива</SPAN> – идентификатор 
            массива, то есть имя двойного указателя для выделяемого блока 
            памяти.</P>
            <DIV id=mark_76 class=lecture_mark></DIV>
            <P id=id_78>Например:</P>
            <DIV id=mark_78 class=lecture_mark></DIV>
            <DIV class=example><PRE>for (int i=0; i&lt;n; i++)
  free (matr[i]); 
   //освобождает память, выделенную для массива значений 
free (matr);
//освобождает память, выделенную под массив указателей
</PRE></DIV><A name=sect5></A>
            <H3>Обращение к элементам двумерного динамического массива</H3>
            <P id=id_80>Адресация элементов динамического массива осуществляется 
            с помощью индексированного имени.</P>
            <DIV id=mark_80 class=lecture_mark></DIV>
            <P id=id_81>Синтаксис:</P>
            <DIV id=mark_81 class=lecture_mark></DIV>
            <DIV class=example><PRE>ИмяМассива[ВыражениеТипаКонстанты][ВыражениеТипаКонстанты];
</PRE></DIV>
            <P id=id_83>или</P>
            <DIV id=mark_83 class=lecture_mark></DIV>
            <DIV class=example><PRE>ИмяМассива[ЗначениеИндекса][ЗначениеИндекса];
</PRE></DIV>
            <P id=id_85>Например:</P>
            <DIV id=mark_85 class=lecture_mark></DIV>
            <P id=id_86><SPAN class=texample>mas[5][7]</SPAN> – индекс задается 
            как константа,</P>
            <DIV id=mark_86 class=lecture_mark></DIV>
            <P id=id_88><SPAN class=texample>sl[i][j]</SPAN> – индекс задается 
            как переменная,</P>
            <DIV id=mark_88 class=lecture_mark></DIV>
            <P id=id_90><SPAN class=texample>array[4*p][p+5]</SPAN> – индекс 
            задается как выражение.</P>
            <DIV id=mark_90 class=lecture_mark></DIV>
            <P id=id_92><SPAN class=xml_em_italic>Пример 1</SPAN>. Сформируйте и 
            выведите на экран единичную матрицу с целыми элементами, вводя ее 
            порядок с клавиатуры.</P>
            <DIV id=mark_92 class=lecture_mark></DIV>
            <DIV class=example><PRE>#include "stdafx.h"
#include &lt;iostream&gt;
using namespace std;

int _tmain(int argc, _TCHAR* argv[]){
  int n,i,j;
  int **matr;//указатель для массива указателей
  cout &lt;&lt; "Input matrix order:";
  cin &gt;&gt; n;
  matr = new int *[n];
  //выделение памяти под массив указателей
  for(i=0; i&lt;n; i++){
    matr[i] = new int[n];
    //выделение памяти для массива значений
    for (j=0; j&lt;n; j++) //заполнение матрицы
      matr[i][j] = (i==j ? 1 : 0);
  }
  cout &lt;&lt; "Result: ";
  for(i=0; i&lt;n; i++){
    cout &lt;&lt; "\n";
    for (j=0; j&lt;n; j++)
      cout &lt;&lt; " " &lt;&lt; matr[i][j];
    delete matr[i];
    //освобождение памяти из-под массива значений
  }
  delete [] matr; 
  //освобождение памяти из-под массива указателей
  system("pause");
  return 0;
}
</PRE></DIV>
            <P id=id_94><SPAN class=xml_em_italic>Пример 2</SPAN>. Вычислить 
            сумму элементов, лежащих на диагоналях матрицы <SPAN 
            class=texample>N &#215; N</SPAN> (обратить внимание на 
            четность-нечетность числа <SPAN class=texample>N</SPAN>). Размер 
            массива должен задаваться пользователем с клавиатуры.</P>
            <DIV id=mark_94 class=lecture_mark></DIV>
            <DIV class=example><PRE>#include "stdafx.h"
#include &lt;iostream&gt;
using namespace std;
#include &lt;time.h&gt;
void gen (int nn,int a, int b,int ***mas); 
//объявление функции генерации массива
int summa(int nn, int **mas);
/*объявление функции вычисления сумму заданных элементов массива*/
void out (int nn,int **mas);
//объявление функции вывода массива 

int _tmain(int argc, _TCHAR* argv[]){
  int **mass, n;
  int s;
  printf("Введите n: ");
  scanf("%d",&amp;n);
  printf("\nГенерация массива \n");
  gen(n,0,10,&amp;mass);
  s=summa(n,mass);
  out(n,mass);
  printf("\nСумма элементов = %d",s);
  system("pause");
  return 0;
}

void gen(int nn, int a, int b, int ***mas){ 
  //функция генерации массива 
  int i,j;
  srand(time(NULL)*1000);
  *mas=(int**)malloc(nn*sizeof(int*)); 
  for (i=0;i&lt;nn;i++){
    (*mas)[i]=(int*)malloc(nn*sizeof(int)); 
    for (j=0;j&lt;nn;j++)
      (*mas)[i][j]=rand()%(b-a)+a;
  }
} 

int summa(int nn, int **mas) {
  //функция вычисления суммы элементов диагоналей
  int i,j, sum=0;
  for (i=0;i&lt;nn;i++)
    for (j=0;j&lt;nn;j++) {
      if ((i==j) || (i==nn-j-1)) { 
        //нахождение элементов диагоналей
        sum+=mas[i][j];  
        //суммирование элементов диагоналей
      }
    }
  return sum;
}

void out (int nn,int **mas){ 
  //функция вывода массива
  int i,j;
  for (i=0;i&lt;nn;i++) {
    for (j=0;j&lt;nn;j++) 
      printf("%4d",mas[i][j]);
    printf("\n");  
    free (mas[i]);
    }
  free (mas);
}
</PRE></DIV>
            <P id=id_98>В языке С++ предусмотрено использование указателя вида 
            <SPAN class=texample>***mass</SPAN>. В данном примере в функцию 
            генерации массива передается не адрес указателя, а его значение. 
            Передача фактического параметра при вызове функции осуществляется 
            через определение адреса указателя <SPAN 
            class=texample>**mass</SPAN>.</P>
            <DIV id=mark_98 class=lecture_mark></DIV><A name=sect6></A>
            <H3>Ключевые термины</H3>
            <P id=id_101><B>Двумерный динамический массив</B> – это двумерный 
            массив, расположенный в динамической памяти.</P>
            <DIV id=mark_101 class=lecture_mark></DIV>
            <P id=id_102><B>Динамический массив</B> – это массив, размер 
            которого заранее не фиксирован и может меняться во время исполнения 
            программы.</P>
            <DIV id=mark_102 class=lecture_mark></DIV>
            <P id=id_103><B>Значение указателя на двумерный динамический 
            массив</B> – это адрес массива указателей на одномерные массивы или 
            адрес выделяемой области динамической памяти, если двумерный массив 
            представляется как одномерный.</P>
            <DIV id=mark_103 class=lecture_mark></DIV>
            <P id=id_104><B>Тип двумерного динамического массива</B> – это тип 
            элементов массива.</P>
            <DIV id=mark_104 class=lecture_mark></DIV>
            <P id=id_105><B>Указатель на двумерный динамический массив</B> – это 
            указатель на массив указателей на одномерные массивы или на начало 
            выделяемого участка динамической памяти, если двумерный массив 
            представляется как одномерный.</P>
            <DIV id=mark_105 class=lecture_mark></DIV><A name=sect7></A>
            <H3>Краткие итоги</H3>
            <OL id=id_106>
              <LI>При работе с массивами, размер которых заранее не известен, 
              используют динамические массивы.
              <LI>Под объявлением двумерного динамического массива понимают 
              объявление двойного указателя, то есть объявление указателя на 
              указатель. Если двумерный массив рассматривается как одномерный, 
              то при объявлении такого массива объявляется указатель на 
              переменную соответствующего типа. 
              <LI>Работа с двумерными динамическими массивами начинается с 
              выделения участка памяти, а завершается освобождением ранее 
              выделенного участка.
              <LI>Выделение и освобождение памяти под двумерный динамический 
              массив выполняется с помощью операций или функций для работы с 
              динамической памятью.
              <LI>Адресация элементов динамического массива осуществляется с 
              помощью индексированного имени.</LI></OL>
            <DIV id=mark_106 class=lecture_mark></DIV><A name=sect8></A>
            <H3>Лабораторная работа 26. Двумерные динамические массивы</H3>
            <P id=id_112><B>Цель работы:</B> изучить объявление, выделение и 
            освобождение памяти под двумерные динамические массивы, обращение к 
            элементам, научиться решать задачи с использованием двумерных 
            динамических массивов на языке C++.</P>
            <DIV id=mark_112 class=lecture_mark></DIV>
            <P id=id_113>При выполнении лабораторной работы для каждого задания 
            требуется написать программу на языке С++, которая получает на входе 
            числовые данные (в зависимости от постановки задачи), выполняет 
            генерацию и вывод двумерного массива указанного типа. Хранение 
            оговоренных в каждой задаче двумерных массивов следует осуществить, 
            используя ресурсы динамической памяти. В каждой задаче необходимо 
            выполнить обработку двумерного массива. Для этого необходимо 
            разработать алгоритм (поиска, замены или численной обработки в 
            двумерных массивах) и реализовать его в виде отдельной функции. Ввод 
            данных осуществляется с клавиатуры с учетом требований к входным 
            данным, содержащихся в постановке задачи. Ограничениями на входные 
            данные является диапазон используемого числового типа данных в языке 
            С++ и максимально допустимый размер динамической памяти.</P>
            <DIV id=mark_113 class=lecture_mark></DIV>
            <P id=id_114><B>Теоретические сведения.</B></P>
            <DIV id=mark_114 class=lecture_mark></DIV>
            <P id=id_115>Ознакомьтесь с материалом лекции 26.</P>
            <DIV id=mark_115 class=lecture_mark></DIV>
            <P id=id_116><B>Задания к лабораторной работе.</B></P>
            <DIV id=mark_116 class=lecture_mark></DIV>
            <P id=id_117>Выполните приведенные ниже задания.</P>
            <DIV id=mark_117 class=lecture_mark></DIV>
            <OL id=id_118>
              <LI>В двумерном целочисленном динамическом массиве замените все 
              четные элементы их половинами.
              <LI>Добавьте в двумерный динамический массив строку из одних нулей 
              после каждой строки, сумма элементов которой больше заданного 
              числа S.
              <LI>В двумерном вещественном динамическом массиве замените все 
              отрицательные элементы их квадратами. Реализуйте данную программу 
              двумя способами: 1) с помощью операций <SPAN 
              class=texample>new</SPAN> и <SPAN class=texample>delete</SPAN>; 2) 
              с помощью библиотечных функций <SPAN class=texample>malloc 
              (calloc)</SPAN> и <SPAN class=texample>free</SPAN>.
              <LI>Замените в двумерном целочисленном динамическом массиве 
              размера 3&#215;3 каждый элемент его алгебраическим дополнением.</LI></OL>
            <DIV id=mark_118 class=lecture_mark></DIV>
            <P id=id_127><B>Указания к выполнению работы.</B></P>
            <DIV id=mark_127 class=lecture_mark></DIV>
            <P id=id_128>Каждое задание необходимо решить в соответствии с 
            изученными методами объявления, генерации и вывода двумерных 
            динамических массивов в языке С++. Обработку данных необходимо 
            выполнить, используя алгоритмы поиска, замены или перестановок 
            данных в двумерных массивах. В задаче 4 перед заменой следует 
            выполнить числовую обработку данных массива. Вывод входных данных и 
            результатов их обработки следует осуществить на экран. При 
            разработке программного кода требуется использовать метод 
            процедурной абстракции и комментировать фрагменты кода.</P>
            <DIV id=mark_128 class=lecture_mark></DIV>
            <P id=id_129>Следует реализовать каждое задание в соответствии с 
            приведенными этапами:</P>
            <DIV id=mark_129 class=lecture_mark></DIV>
            <UL id=id_130>
              <LI>изучить словесную постановку задачи, выделив при этом все виды 
              данных;
              <LI>сформулировать математическую постановку задачи;
              <LI>выбрать метод решения задачи, если это необходимо;
              <LI>разработать графическую схему алгоритма;
              <LI>записать разработанный алгоритм на языке С++;
              <LI>разработать контрольный тест к программе;
              <LI>отладить программу;
              <LI>представить отчет по работе.</LI></UL>
            <DIV id=mark_130 class=lecture_mark></DIV>
            <P id=id_139>Требования к отчету.</P>
            <DIV id=mark_139 class=lecture_mark></DIV>
            <P id=id_140>Отчет по лабораторной работе должен соответствовать 
            следующей структуре.</P>
            <DIV id=mark_140 class=lecture_mark></DIV>
            <UL id=id_141>
              <LI>Титульный лист.
              <LI>Словесная постановка задачи. В этом подразделе проводится 
              полное описание задачи. Описывается суть задачи, анализ входящих в 
              нее физических величин, область их допустимых значений, единицы их 
              измерения, возможные ограничения, анализ условий при которых 
              задача имеет решение (не имеет решения), анализ ожидаемых 
              результатов.
              <LI>Математическая модель. В этом подразделе вводятся 
              математические описания физических величин и математическое 
              описание их взаимодействий. Цель подраздела – представить решаемую 
              задачу в математической формулировке.
              <LI>Алгоритм решения задачи. В подразделе описывается разработка 
              структуры алгоритма, обосновывается абстракция данных, задача 
              разбивается на подзадачи. Схема алгоритма выполняется по ЕСПД 
              (ГОСТ 19.003-80 и ГОСТ 19.002-80).
              <LI>Листинг программы. Подраздел должен содержать текст программы 
              на языке программирования С++, реализованный в среде MS Visual 
              Studio 2010.
              <LI>Контрольный тест. Подраздел содержит наборы исходных данных и 
              полученные в ходе выполнения программы результаты.
              <LI>Выводы по лабораторной работе. 
              <LI>Ответы на контрольные вопросы.</LI></UL>
            <DIV id=mark_141 class=lecture_mark></DIV>
            <P id=id_150>Контрольные вопросы</P>
            <DIV id=mark_150 class=lecture_mark></DIV>
            <OL id=id_151>
              <LI>В чем сходство и отличие одномерных и двумерных динамических 
              массивов?
              <LI>Как размещаются в памяти элементы двумерного динамического 
              массива?
              <LI>Что является значением двойного указателя при объявлении 
              двумерных динамических массивов?
              <LI>Как выделяется память для двумерных динамических массивов? 
              <LI>Какими способами можно обратиться к элементам двумерного 
              динамического массива?
              <LI>Назовите порядок освобождения памяти, выделенной под двумерный 
              динамический массив. 
              <LI>Какая область динамической памяти, выделенной под двумерный 
              динамический массив, будет освобождена, если только применить 
              операцию: delete [] mass;?
              <LI>Какова цель использования тройных указателей в 
            программах?</LI></OL>
            <DIV id=mark_151 class=lecture_mark></DIV></TD></TR>
        <TR>
          <TD height=8><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=8></TD></TR></TBODY></TABLE><!-- /content --></TD>
    <TD><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=8 height=1></TD></TR></TBODY></TABLE><!-- /bottom -->
<TABLE border=0 cellSpacing=0 cellPadding=0 width="100%">
  <TBODY>
  <TR>
    <TD class=orang height=1><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=1 height=1></TD></TR>
  <TR>
    <TD class=ltxt align=center>© INTUIT.ru, 2003-2010. Все права 
  защищены.</TD></TR></TBODY></TABLE><!-- /bottom -->
<SCRIPT type=text/javascript 
src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/urchin.js">
</SCRIPT>

<SCRIPT 
type=text/javascript>
_uacct = "UA-3475067-1";
urchinTracker();
</SCRIPT>
</BODY></HTML>
