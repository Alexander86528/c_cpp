<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0071)http://www.intuit.ru/department/algorithms/staldata/18/staldata_18.html -->
<HTML><HEAD><TITLE>INTUIT.ru::Интернет-Университет Информационных Технологий</TITLE>
<META content="text/html; charset=windows-1251" http-equiv=Content-Type><LINK 
rel=stylesheet type=text/css 
href="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/printable.css">
<META name=GENERATOR content="MSHTML 9.00.8080.16413"></HEAD>
<BODY leftMargin=6 topMargin=6 marginwidth="6" marginheight="6">
<DIV align=left><SPAN style="COLOR: #000000; FONT-WEIGHT: bold">&nbsp;&nbsp; 
<SPAN style="FONT-SIZE: 12pt">Интернет-Университет Информационных 
Технологий</SPAN> </SPAN></DIV>&nbsp;&nbsp; <SPAN 
style="COLOR: #330066; TEXT-DECORATION: underline" 
align="rright">http://www.INTUIT.ru</SPAN> 
<TABLE border=0 cellSpacing=0 cellPadding=0 width="100%">
  <TBODY>
  <TR>
    <TD height=8 colSpan=3><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=1 height=8></TD></TR>
  <TR>
    <TD class=orang height=1 colSpan=3><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=1 height=1></TD></TR>
  <TR>
    <TD height=8 colSpan=3><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=1 height=8></TD></TR>
  <TR vAlign=top>
    <TD><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=8 height=1></TD>
    <TD><!-- content -->
      <TABLE border=0 cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD class=head>Структуры и алгоритмы компьютерной обработки 
        данных</TD></TR>
        <TR>
          <TD height=4><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=4></TD></TR>
        <TR>
          <TD class=orang height=1><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=1></TD></TR>
        <TR>
          <TD height=8><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=8></TD></TR>
        <TR>
          <TD><SPAN class=headsub>18. Лекция: Битовые поля: версия для печати 
            и PDA</SPAN> <BR><SPAN class=rtxt>В лекции рассматриваются 
            определение, объявление и размещение в памяти битовых полей, методы 
            доступа к битовым полям, приемы использования битовых полей для 
            побитового анализа данных. </SPAN></TD></TR>
        <TR>
          <TD height=8><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=8></TD></TR>
        <TR>
          <TD class=orang height=1><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=1></TD></TR>
        <TR>
          <TD height=8><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=8></TD></TR>
        <TR>
          <TD><A name=sect1></A>
            <H3></H3>
            <P id=id_1><B>Цель лекции:</B> изучить понятие, объявление и 
            размещение в памяти битовых полей, доступ к битовым полям структуры 
            или объединения и научиться решать задачи с использованием битовых 
            полей на языке C++.</P>
            <DIV id=mark_1 class=lecture_mark></DIV>
            <P id=id_2>В отличие от других языков программирования С++ имеет 
            структуру, называемую битовыми полями (полями битов), которая 
            позволяет работать с отдельными битами. <SPAN 
            class=xml_em_italic>Битовое поле</SPAN> – это особый компонент 
            структуры, определяющий длину отдельного ее элемента. Битовые поля 
            полезны по нескольким причинам.</P>
            <DIV id=mark_2 class=lecture_mark></DIV>
            <UL id=id_3>
              <LI>Если ограничено место для хранения информации, можно сохранить 
              несколько логических переменных в одном байте.
              <LI>Некоторые интерфейсы устройств передают информацию, 
              закодировав биты в один байт.
              <LI>Некоторым процессам кодирования необходимо получить доступ к 
              отдельным битам в байте.</LI></UL>
            <DIV id=mark_3 class=lecture_mark></DIV>
            <P id=id_7>Хотя все эти функции могут выполняться с помощью битовых 
            операторов, битовые поля могут внести большую ясность в программу. 
            Метод использования битовых полей для доступа к битам основан на 
            структурах.</P>
            <DIV id=mark_7 class=lecture_mark></DIV>
            <P id=id_8><B>Битовое поле</B> – это элемент структуры, определенный 
            как некоторое число битов, обычно меньшее, чем число битов в целом 
            числе (оно по величине не превосходит машинного слова и зависит от 
            реализации компилятора). Они предназначены для экономного размещения 
            в памяти данных небольшого диапазона, обеспечивают удобный доступ к 
            отдельным битам данных. Кроме того, с помощью битовых полей можно 
            формировать объекты с длиной внутреннего представления, не кратной 
            байту.</P>
            <DIV id=mark_8 class=lecture_mark></DIV>
            <P id=id_9>Битовые поля обычно применяются в низкоуровневом 
            программировании.</P>
            <DIV id=mark_9 class=lecture_mark></DIV><A name=sect2></A>
            <H3>Объявление битовых полей</H3>
            <P id=id_10>Элементом структуры может быть битовое поле, 
            обеспечивающее доступ к отдельным битам памяти. Вне структур или 
            объединений битовые поля объявлять нельзя. Нельзя также 
            организовывать массивы битовых полей и нельзя применять к полям 
            операцию определения адреса или получить ссылку на них.</P>
            <DIV id=mark_10 class=lecture_mark></DIV>
            <P id=id_11>Синтаксис объявления типа структуры с битовыми 
            полями:</P>
            <DIV id=mark_11 class=lecture_mark></DIV>
            <DIV class=example><PRE>struct [ИмяСтруктуры] { Тип1 ИмяПоля1 : ШиринаПоля1
                        Тип2 ИмяПоля2 : ШиринаПоля2
                        ........................
                        ТипN ИмяПоляN : ШиринаПоляN
                      } ИмяСтруктуры; 
</PRE></DIV>
            <P id=id_13>где <SPAN class=texample>struct</SPAN> – спецификатор 
            типа;</P>
            <DIV id=mark_13 class=lecture_mark></DIV>
            <P id=id_15><SPAN class=texample>ИмяСтруктуры</SPAN> – 
            идентификатор;</P>
            <DIV id=mark_15 class=lecture_mark></DIV>
            <P id=id_17><SPAN class=texample>Тип1, ... ТипN</SPAN> – тип поля, 
            который может быть только <SPAN class=texample>int</SPAN>, возможно, 
            со спецификатором <SPAN class=texample>unsigned</SPAN> или <SPAN 
            class=texample>signed</SPAN>;</P>
            <DIV id=mark_17 class=lecture_mark></DIV>
            <P id=id_22><SPAN class=texample>ШиринаПоля (длина)</SPAN> – целое 
            неотрицательное десятичное число, значение которого обычно (в 
            зависимости от реализации компилятора) не должно превышать длины 
            машинного слова.</P>
            <DIV id=mark_22 class=lecture_mark></DIV>
            <P id=id_24>Например:</P>
            <DIV id=mark_24 class=lecture_mark></DIV>
            <DIV class=example><PRE>struct {
        int c1 : 4; 
        int c2 : 12; 
       } ab;
</PRE></DIV>
            <P id=id_26>Битовые поля длиной 1 должны объявляться как unsigned, 
            поскольку 1 бит не может иметь знака. Битовые поля могут иметь длину 
            от 1 до 16 бит для 16-битных сред и от 1 до 32 бит для 32-битных 
            сред.</P>
            <DIV id=mark_26 class=lecture_mark></DIV>
            <P id=id_27>Разрешается поле без имени (для этого надо указать 
            только двоеточие и ширину), с помощью которого в структуру вводятся 
            неиспользуемые биты (промежуток между значимыми полями). Нулевая 
            ширина поля вводится, когда необходимо, чтобы следующее в данной 
            структуре поле разместилось с начала очередного машинного слова.</P>
            <DIV id=mark_27 class=lecture_mark></DIV>
            <P id=id_28>Например, если нам нужны только биты <SPAN 
            class=texample>cts</SPAN> и <SPAN class=texample>dsr</SPAN>, то 
            можно объявить структуру <SPAN class=texample>status_type</SPAN> 
            следующим образом:</P>
            <DIV id=mark_28 class=lecture_mark></DIV>
            <DIV class=example><PRE>struct status_type {
                    unsigned : 4; 
                    unsigned cts :1; 
                    unsigned dsr :4; 
                   } status;
</PRE></DIV>
            <P id=id_33>В структуре можно смешивать "обычные" элементы с 
            битовыми полями.</P>
            <DIV id=mark_33 class=lecture_mark></DIV>
            <P id=id_34>Например:</P>
            <DIV id=mark_34 class=lecture_mark></DIV>
            <DIV class=example><PRE>struct emp {
            struct addr address;
            float pay;
            unsigned lay_off: 1; //работает или нет
            unsigned hourly: 1;//почасовая оплата или оклад
            unsigned deductions : 3; //удержание налога
           };
</PRE></DIV>
            <P id=id_36>Эта структура определяет запись по каждому служащему, в 
            которой используется только один байт для хранения трех элементов 
            информации: статус служащего, характер оплаты его труда и налоговая 
            ставка. Без использования битовых полей для хранения этой информации 
            пришлось бы занять несколько байтов.</P>
            <DIV id=mark_36 class=lecture_mark></DIV>
            <P id=id_37>Вместо служебного слова <SPAN 
            class=texample>struct</SPAN> можно употреблять <SPAN 
            class=texample>union</SPAN>. В этом случае определяется объединение 
            с битовыми полями. Битовые поля в объединениях используются для 
            доступа к нужным битам того или иного объекта, входящего в 
            объединение.</P>
            <DIV id=mark_37 class=lecture_mark></DIV>
            <P id=id_40><SPAN class=xml_em_italic>Пример 1</SPAN>. В программе 
            объединение позволяет сформировать код символа <SPAN 
            class=texample>'D'</SPAN> (равный 68):</P>
            <DIV id=mark_40 class=lecture_mark></DIV>
            <DIV class=example><PRE>#include "stdafx.h"
#include &lt;iostream&gt;
using namespace std;
union { char simb;
        struct { int x:5;
                 int y:3;
               } hh;
      } cod;  
int _tmain(int argc, _TCHAR* argv[]) {
  cod.hh.x = 4;
  cod.hh.y = 2;
  cout &lt;&lt; cod.simb; // выводит на экран символ 'D'
  system("pause");
  return 0;
}
</PRE></DIV><A name=sect3></A>
            <H3>Доступ к элементам структур с битовыми полями</H3>
            <P id=id_43>Для обращения к битовым полям используются те же 
            конструкции, что и для обращения к обычным элементам структур:</P>
            <DIV id=mark_43 class=lecture_mark></DIV>
            <DIV class=example><PRE>ИмяСтруктуры.ИмяПоля
(* УказательНаСтруктуру). ИмяПоля
УказательНаСтруктуру -&gt; ИмяПоля
</PRE></DIV>
            <P id=id_45>Например, для структуры <SPAN class=texample>xx</SPAN> с 
            битовыми полями:</P>
            <DIV id=mark_45 class=lecture_mark></DIV>
            <DIV class=example><PRE>struct {
        int a : 10; 
        int b : 14; 
       } xx;
</PRE></DIV>
            <P id=id_48>правомочны следующие операторы:</P>
            <DIV id=mark_48 class=lecture_mark></DIV>
            <DIV class=example><PRE>xx.a=1;
xx.b=48;
xx.a=xx.b=0;
</PRE></DIV><A name=sect4></A>
            <H3>Размещение битовых полей в памяти</H3>
            <P id=id_50>От реализации зависит порядок размещения в памяти полей 
            одной структуры. Поля могут размещаться как слева направо, так и 
            справа налево. Любой код программ, использующий битовые поля, 
            зависит от компьютера и компилятора.</P>
            <DIV id=mark_50 class=lecture_mark></DIV>
            <P id=id_51><SPAN class=xml_em_italic>Пример 2.</SPAN></P>
            <DIV id=mark_51 class=lecture_mark></DIV>
            <DIV class=example><PRE>#include "stdafx.h"
#include &lt;iostream&gt;
using namespace std;
struct expl {
             int i:2;
             unsigned j:2;
             int :2;
             int k:2;
             int dummy: 8;
            } my;
int _tmain(int argc, _TCHAR* argv[]) {
  my.dummy = 0;
  my.i = 1;
  my.j = 3;
  my.k = -1;
  printf("%d\n", my);
  printf("Поля: %d\t%d\t%d", my.i, my.j, my.k);
  system("pause");
  return 0;
}
</PRE></DIV>
            <P id=id_53>На <A 
            href="http://www.intuit.ru/department/algorithms/staldata/18/staldata_18.html#image.18.1">рис. 
            18.1</A> показывается, как выглядит переменная структурного типа 
            <SPAN class=texample>my</SPAN> в памяти.</P>
            <DIV id=mark_53 class=lecture_mark></DIV>
            <P id=id_55 align=left><A name=image.18.1></A>
            <DIV><IMG alt="Побитовое представление структуры" 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/18_01.png" 
            width=571 height=74></DIV><BR><B>Рис. 18.1.</B>&nbsp; Побитовое 
            представление структуры
            <P></P>
            <DIV id=mark_55 class=lecture_mark></DIV>
            <P id=id_56><SPAN class=xml_em_italic>Пример 3</SPAN>. Иллюстрация 
            возможностей объединений и структур с битовыми полями. </P>
            <DIV id=mark_56 class=lecture_mark></DIV>
            <P id=id_57>В программе вводятся значения двух целых переменных 
            <SPAN class=texample>m</SPAN> и <SPAN class=texample>n</SPAN>, и 
            остатки от их деления на 16 заносятся соответственно в четыре 
            младших и в четыре старших разряда одного байта. Таким образом, 
            выполняется некоторая кодировка введенных значений переменных <SPAN 
            class=texample>m</SPAN> и <SPAN class=texample>n</SPAN>. Затем 
            печатается изображение содержимого сформированного байта.</P>
            <DIV id=mark_57 class=lecture_mark></DIV>
            <P id=id_62>Обратите внимание на использование объединения. В 
            функции <SPAN class=texample>cod()</SPAN> запись данных 
            производиться в элементы (битовые поля) структуры <SPAN 
            class=texample>hh</SPAN>, входящей в объединение <SPAN 
            class=texample>un</SPAN>, а результат выбирается из того же 
            объединения <SPAN class=texample>un</SPAN> в виде одного байта. В 
            функции <SPAN class=texample>binary()</SPAN> происходит обратное 
            преобразование – в нее как значение параметра передается байт, 
            содержимое которого побитово "расшифровывается" за счет обращения к 
            отдельным полям структуры <SPAN class=texample>byte</SPAN>, входящей 
            в объединение <SPAN class=texample>cod</SPAN>.</P>
            <DIV id=mark_62 class=lecture_mark></DIV>
            <DIV class=example><PRE>//Структуры, объединения и битовые поля
#include "stdafx.h"
#include &lt;iostream&gt;
using namespace std;
void binar (unsigned char); //прототип функции
unsigned char cod (int, int); // прототип функции

int _tmain(int argc, _TCHAR* argv[]) {
  unsigned char k;
  int m, n;
  printf("m=");  scanf("%d", &amp;m);
  printf("n=");  scanf("%d", &amp;n);
  k=cod(m,n);
  printf("cod=%u\n", k);
  binar(k);
  system("pause");
  return 0;
}

/*Упаковка в один байт остатков от деления на 16 двух целых чисел*/
unsigned char cod (int a, int b) {
  union { 
         unsigned char z;
         struct { 
                 unsigned int x : 4;//младшие биты
                 unsigned int y : 4;//старшие биты
               } hh;
        } un;
  un.hh.x=a%16;  
  un.hh.y=b%16;
  return un.z;
}

//двоичное представление байта
void binar (unsigned char ch) {
  union { 
         unsigned char ss;
         struct { 
                 unsigned a0 : 1; 
                 unsigned a1 : 1;
                 unsigned a2 : 1;
                 unsigned a3 : 1;
                 unsigned a4 : 1;
                 unsigned a5 : 1;
                 unsigned a6 : 1;
                 unsigned a7 : 1;
                } byte;
        } cod;
  cod.ss=ch;
  printf("Номер битов:     7  6  5  4  3  2  1  0\n");
  printf("Значение битов:  %d  %d  %d  %d  %d  %d  %d  %d\n", 
          cod.byte.a7, cod.byte.a6, cod.byte.a5, cod.byte.a4,
          cod.byte.a3, cod.byte.a2, cod.byte.a1, cod.byte.a0);
}
</PRE></DIV>
            <P id=id_71>Результат выполнения программы:</P>
            <DIV id=mark_71 class=lecture_mark></DIV>
            <P id=id_72><SPAN class=xml_em_italic>Первый вариант</SPAN></P>
            <DIV id=mark_72 class=lecture_mark></DIV>
            <DIV class=example><PRE>m=1                                    
n=3                                    
cod=49                                 
Номер битов:     7  6  5  4  3  2  1  0
Значение битов:  0  0  1  1  0  0  0  1
</PRE></DIV>
            <P id=id_74><SPAN class=xml_em_italic>Второй вариант</SPAN></P>
            <DIV id=mark_74 class=lecture_mark></DIV>
            <DIV class=example><PRE>m=0                                    
n=1                                    
cod=16                                 
Номер битов:     7  6  5  4  3  2  1  0
Значение битов:  0  0  0  1  0  0  0  0
</PRE></DIV><A name=sect5></A>
            <H3>Ключевые термины</H3>
            <P id=id_76><B>Битовое поле</B> – это элемент структуры, 
            определенный как некоторое число битов, обычно меньшее, чем длина 
            машинного слова.</P>
            <DIV id=mark_76 class=lecture_mark></DIV>
            <P id=id_77><B>Размещение битовых полей</B> – это порядок следования 
            битов в машинных словах.</P>
            <DIV id=mark_77 class=lecture_mark></DIV>
            <P id=id_78><B>Ширина битового поля</B> – это количество битов, 
            занимаемых полем.</P>
            <DIV id=mark_78 class=lecture_mark></DIV><A name=sect6></A>
            <H3>Краткие итоги</H3>
            <OL id=id_79>
              <LI>В качестве элемента структуры или объединения может быть 
              использовано битовое поле.
              <LI>Вне структур или объединений битовые поля использовать нельзя.
              <LI>Существует три способа доступа к битовым полям.
              <LI>К битовым полям нельзя обратиться по адресу размещения в 
              памяти.
              <LI>Расположение битовых полей зависит от реализации.
              <LI>Ширина битовых полей не должна превосходить длины машинного 
              слова. Допускается использование битового поля нулевой ширины.
              <LI>Для битовых полей определена операция присваивания.</LI></OL>
            <DIV id=mark_79 class=lecture_mark></DIV><A name=sect7></A>
            <H3>Лабораторная работа 18. Битовые поля</H3>
            <P id=id_87><B>Цель работы:</B> изучить понятие, объявление и 
            размещение в памяти битовых полей, доступ к битовым полям структуры 
            или объединения и научиться решать задачи с использованием битовых 
            полей на языке C++.</P>
            <DIV id=mark_87 class=lecture_mark></DIV>
            <P id=id_88>При выполнении лабораторной работы для каждого задания 
            требуется написать программу на языке С++, в которой выполнена 
            разработка структуры с битовыми полями в соответствии с постановкой 
            задачи, ввод данных элементов структуры, их обработка и вывод на 
            экран в указанном формате. При этом битовые поля могут 
            использоваться только в качестве полей структуры. Ввод данных 
            осуществляется с клавиатуры с учетом требований к входным данным, 
            содержащихся в постановке задачи. Ограничениями на входные данные 
            являются максимальный размер строковых данных, диапазоны числовых 
            типов полей структуры, максимально допустимый размер массива 
            структур в языке С++.</P>
            <DIV id=mark_88 class=lecture_mark></DIV>
            <P id=id_89><B>Теоретические сведения.</B></P>
            <DIV id=mark_89 class=lecture_mark></DIV>
            <P id=id_90>Ознакомьтесь с материалом лекции 18.</P>
            <DIV id=mark_90 class=lecture_mark></DIV>
            <P id=id_91><B>Задания к лабораторной работе.</B></P>
            <DIV id=mark_91 class=lecture_mark></DIV>
            <P id=id_92>Выполните приведенные ниже задания.</P>
            <DIV id=mark_92 class=lecture_mark></DIV>
            <OL id=id_93>
              <LI>Разработайте структуру, используя битовые поля для обозначения 
              логических (битовых) значений. Структура Магазин: Наименование 
              товара, Цена, Страна производства, Наличие в магазине, 
              Соответствие стандарту РФ, Является товаром месяца. Объявите и 
              заполните массив из пяти структур. Распечатайте информацию обо 
              всех введенных товарах. Распечатайте информацию об имеющихся в 
              магазине товарах, не соответствующих стандарту РФ. 
              <LI>Используя объединение с битовыми полями, определите четность 
              беззнакового целого числа по анализу старшего бита (операцию 
              деления с остатком не использовать).
              <LI>Используя объединение с битовыми полями, определите кратность 
              8 беззнакового целого числа по анализу старших битов (операцию 
              деления с остатком не использовать).</LI></OL>
            <DIV id=mark_93 class=lecture_mark></DIV>
            <P id=id_97><B>Указания к выполнению работы.</B></P>
            <DIV id=mark_97 class=lecture_mark></DIV>
            <P id=id_98>Каждое задание необходимо решить в соответствии с 
            изученными методами объявления и обработки структур с битовыми 
            полями в языке С++. При выполнении заданий следует помнить. что в 
            языке С++ битовые поля не используют автономно, а обязательно 
            включают во множество полей структурного типа. При объявлении 
            битовых полей необходимо выполнить комментирование используемых 
            битов. При выполнении задач 2 и 3 используйте внутренне 
            представление целых чисел. В задаче 1 следует объявить массив 
            структур, организовав его вывод в виде таблицы.</P>
            <DIV id=mark_98 class=lecture_mark></DIV>
            <P id=id_99>Следует реализовать каждое задание в соответствии с 
            приведенными этапами:</P>
            <DIV id=mark_99 class=lecture_mark></DIV>
            <UL id=id_100>
              <LI>изучить словесную постановку задачи, выделив при этом все виды 
              данных;
              <LI>сформулировать математическую постановку задачи;
              <LI>выбрать метод решения задачи, если это необходимо;
              <LI>разработать графическую схему алгоритма;
              <LI>записать разработанный алгоритм на языке С++;
              <LI>разработать контрольный тест к программе;
              <LI>отладить программу;
              <LI>представить отчет по работе.</LI></UL>
            <DIV id=mark_100 class=lecture_mark></DIV>
            <P id=id_109><B>Требования к отчету.</B></P>
            <DIV id=mark_109 class=lecture_mark></DIV>
            <P id=id_110>Отчет по лабораторной работе должен соответствовать 
            следующей структуре.</P>
            <DIV id=mark_110 class=lecture_mark></DIV>
            <UL id=id_111>
              <LI>Титульный лист.
              <LI>Словесная постановка задачи. В этом подразделе проводится 
              полное описание задачи. Описывается суть задачи, анализ входящих в 
              нее физических величин, область их допустимых значений, единицы их 
              измерения, возможные ограничения, анализ условий при которых 
              задача имеет решение (не имеет решения), анализ ожидаемых 
              результатов.
              <LI>Математическая модель. В этом подразделе вводятся 
              математические описания физических величин и математическое 
              описание их взаимодействий. Цель подраздела – представить решаемую 
              задачу в математической формулировке.
              <LI>Алгоритм решения задачи. В подразделе описывается разработка 
              структуры алгоритма, обосновывается абстракция данных, задача 
              разбивается на подзадачи. Схема алгоритма выполняется по ЕСПД 
              (ГОСТ 19.003-80 и ГОСТ 19.002-80).
              <LI>Листинг программы. Подраздел должен содержать текст программы 
              на языке программирования С++, реализованный в среде MS Visual 
              Studio 2010.
              <LI>Контрольный тест. Подраздел содержит наборы исходных данных и 
              полученные в ходе выполнения программы результаты.
              <LI>Выводы по лабораторной работе. 
              <LI>Ответы на контрольные вопросы.</LI></UL>
            <DIV id=mark_111 class=lecture_mark></DIV>
            <P id=id_120><B>Контрольные вопросы</B></P>
            <DIV id=mark_120 class=lecture_mark></DIV>
            <OL id=id_121>
              <LI>Какого типа объявляются битовые поля?
              <LI>Почему нельзя объявить битовые поля вне структуры или 
              объединения?
              <LI>Как осуществляется адресация битовых полей?
              <LI>От чего зависит порядок размещения в памяти битовых полей? 
              <LI>Возможно ли объявление массива битовых полей? Почему?
              <LI>Возможно ли объявить безымянное битовое поле? Если да, то с 
              какой целью оно используется?
              <LI>Возможно ли объявить битовое поле нулевой длины? Если да, то с 
              какой целью оно используется?
              <LI>Существуют ли ограничения на длину битового поля?
              <LI>С какой целью используются объединения с битовыми полями? 
              <LI>Какие существуют способы обращения к битовым полям? </LI></OL>
            <DIV id=mark_121 class=lecture_mark></DIV></TD></TR>
        <TR>
          <TD height=8><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=8></TD></TR></TBODY></TABLE><!-- /content --></TD>
    <TD><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=8 height=1></TD></TR></TBODY></TABLE><!-- /bottom -->
<TABLE border=0 cellSpacing=0 cellPadding=0 width="100%">
  <TBODY>
  <TR>
    <TD class=orang height=1><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=1 height=1></TD></TR>
  <TR>
    <TD class=ltxt align=center>© INTUIT.ru, 2003-2010. Все права 
  защищены.</TD></TR></TBODY></TABLE><!-- /bottom -->
<SCRIPT type=text/javascript 
src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/urchin.js">
</SCRIPT>

<SCRIPT 
type=text/javascript>
_uacct = "UA-3475067-1";
urchinTracker();
</SCRIPT>
</BODY></HTML>
