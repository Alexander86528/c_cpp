<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0069)http://www.intuit.ru/department/algorithms/staldata/6/staldata_6.html -->
<HTML><HEAD><TITLE>INTUIT.ru::Интернет-Университет Информационных Технологий</TITLE>
<META content="text/html; charset=windows-1251" http-equiv=Content-Type><LINK 
rel=stylesheet type=text/css 
href="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/printable.css">
<META name=GENERATOR content="MSHTML 9.00.8080.16413"></HEAD>
<BODY leftMargin=6 topMargin=6 marginwidth="6" marginheight="6">
<DIV align=left><SPAN style="COLOR: #000000; FONT-WEIGHT: bold">&nbsp;&nbsp; 
<SPAN style="FONT-SIZE: 12pt">Интернет-Университет Информационных 
Технологий</SPAN> </SPAN></DIV>&nbsp;&nbsp; <SPAN 
style="COLOR: #330066; TEXT-DECORATION: underline" 
align="rright">http://www.INTUIT.ru</SPAN> 
<TABLE border=0 cellSpacing=0 cellPadding=0 width="100%">
  <TBODY>
  <TR>
    <TD height=8 colSpan=3><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=1 height=8></TD></TR>
  <TR>
    <TD class=orang height=1 colSpan=3><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=1 height=1></TD></TR>
  <TR>
    <TD height=8 colSpan=3><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=1 height=8></TD></TR>
  <TR vAlign=top>
    <TD><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=8 height=1></TD>
    <TD><!-- content -->
      <TABLE border=0 cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD class=head>Структуры и алгоритмы компьютерной обработки 
        данных</TD></TR>
        <TR>
          <TD height=4><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=4></TD></TR>
        <TR>
          <TD class=orang height=1><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=1></TD></TR>
        <TR>
          <TD height=8><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=8></TD></TR>
        <TR>
          <TD><SPAN class=headsub>6. Лекция: Решение задач с использованием 
            указателей: версия для печати и PDA</SPAN> <BR><SPAN class=rtxt>В 
            лекции рассматриваются определение, реализация одиночного и 
            многочисленного перенаправления с помощью указателей, определение, 
            способы объявления, разработка и вызов функций с переменным числом 
            параметров, дается обзор типичных ошибок, связанных с некорректным 
            использованием указателей. </SPAN></TD></TR>
        <TR>
          <TD height=8><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=8></TD></TR>
        <TR>
          <TD class=orang height=1><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=1></TD></TR>
        <TR>
          <TD height=8><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=8></TD></TR>
        <TR>
          <TD><A name=sect1></A>
            <H3></H3>
            <P id=id_1><B>Цель лекции:</B> изучить функции с переменным числом 
            параметров и приемов построения программ, используя указатели, 
            научиться решать задачи с использованием функций с переменным числом 
            параметров в языке С++.</P>
            <DIV id=mark_1 class=lecture_mark></DIV><A name=sect2></A>
            <H3>Указатель на указатель</H3>
            <P id=id_2>Указатель на указатель является формой многочисленного 
            перенаправления или цепочки указателей (<A 
            href="http://www.intuit.ru/department/algorithms/staldata/6/staldata_6.html#image.6.1">рис. 
            6.1</A>).</P>
            <DIV id=mark_2 class=lecture_mark></DIV>
            <P id=id_3 align=left><A name=image.6.1></A>
            <DIV><IMG 
            alt="Представление одиночного и многочисленного перенаправлений" 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/06_01.png" 
            width=457 height=186></DIV><BR><B>Рис. 6.1.</B>&nbsp; Представление 
            одиночного и многочисленного перенаправлений
            <P></P>
            <DIV id=mark_3 class=lecture_mark></DIV>
            <P id=id_4>В случае одиночного перенаправления указатель содержит 
            адрес некоторого участка памяти, содержащего определенное значение. 
            В случае указателя на указатель реализуется многочисленное 
            перенаправление: первый указатель содержит адрес второго, который в 
            свою очередь содержит адрес участка памяти, содержащего некоторое 
            значение.</P>
            <DIV id=mark_4 class=lecture_mark></DIV>
            <P id=id_5>Многочисленное перенаправление может и дальше 
            расширяться. Но существует немного случаев, когда необходимо что-то 
            более мощное, чем указатель на указатель. Излишнее перенаправление 
            приводит к концептуальным ошибкам, которые очень трудно исправлять. 
            Переменная, являющаяся указателем на указатель, должна быть описана 
            определенным образом. В С++ это выполняется путем помещения двух 
            звездочек перед именем. Например, следующее объявление сообщает 
            компилятору, что <SPAN class=texample>nb</SPAN> – это <SPAN 
            class=xml_em_italic>указатель на указатель</SPAN> типа <SPAN 
            class=texample>float</SPAN>:</P>
            <DIV id=mark_5 class=lecture_mark></DIV>
            <DIV class=example><PRE>float **nb;
/*nb – это не указатель на число с плавающей точкой, 
а указатель на указатель на вещественное число*/
</PRE></DIV>
            <P id=id_9>Для получения доступа к значению, адресуемому указателем 
            на указатель, следует применить оператор разыменования * два раза, 
            как показано в следующем примере:</P>
            <DIV id=mark_9 class=lecture_mark></DIV>
            <DIV class=example><PRE>#include "stdafx.h"
#include &lt;iostream&gt;
using namespace std;
int _tmain(int argc, _TCHAR* argv[]){
  int *p, x, **q;
  x = 10;
  p = &amp;x;
  q = &amp;p;
  printf("%d", **q); /* вывод значения х */
  system("pause");
  return 0;
}
</PRE></DIV>
            <P id=id_11>Здесь <SPAN class=texample>р</SPAN> объявляется как 
            указатель на целое, а <SPAN class=texample>q</SPAN> – это указатель 
            на указатель на целое. Вызов <SPAN class=texample>printf()</SPAN> 
            выводит число 10 на экран.</P>
            <DIV id=mark_11 class=lecture_mark></DIV>
            <P id=id_15>Так как указатель – это объект в памяти, то можно 
            определять указатель на указатель и т.д. сколько нужно раз. 
            Например, в следующей программе реализовано многочисленное 
            перенаправление и выполнен доступ к значению переменной:</P>
            <DIV id=mark_15 class=lecture_mark></DIV>
            <DIV class=example><PRE>//цепочка указателей на указатели
#include "stdafx.h"
#include &lt;iostream&gt;
using namespace std;
int _tmain(int argc, _TCHAR* argv[]){
  int i=88;
  int *pi=&amp;i;
  int **ppi=&amp;pi;
  int ***pppi=&amp;ppi;
  cout &lt;&lt; "\n***pppi = " &lt;&lt; ***pppi;
  system("pause");
  return 0;
}
</PRE></DIV>
            <P id=id_17>Ассоциативность унарной операции разыменования 
            выполняется справа налево, поэтому последовательно обеспечивается 
            доступ к участку памяти с адресом <SPAN class=texample>pppi</SPAN>, 
            затем к участку с адресом <SPAN class=texample>(*pppi)== ppi</SPAN>, 
            затем к <SPAN class=texample>(*ppi)== pi</SPAN>, затем к <SPAN 
            class=texample>(*pi)== i</SPAN>. С помощью скобок последовательность 
            разыменований можно пояснить таким выражением <SPAN 
            class=texample>*(*(*pppi)))</SPAN>.</P>
            <DIV id=mark_17 class=lecture_mark></DIV><A name=sect3></A>
            <H3>Функции с переменным числом параметров</H3>
            <P id=id_23>В языке С++ допустимы функции, количество параметров у 
            которых при компиляции не фиксировано. Кроме того, до вызова функции 
            могут быть неизвестными и типы параметров. Количество и тип 
            параметров становится известным только в момент вызова, когда явно 
            задан список фактических параметров. Каждая функция с переменным 
            числом параметров должна иметь хотя бы один обязательный 
            параметр.</P>
            <DIV id=mark_23 class=lecture_mark></DIV>
            <P id=id_24>Синтаксис определения функции с переменным числом 
            параметров:</P>
            <DIV id=mark_24 class=lecture_mark></DIV>
            <DIV class=example><PRE>тип имя (спецификация_явных_параметров,...){
  тело_функции 
}
</PRE></DIV>
            <P id=id_26>где <SPAN class=texample>тип</SPAN> – тип, возвращаемого 
            функцией значения; <SPAN class=texample>имя</SPAN> – имя функции; 
            <SPAN class=texample>спецификация_явных_параметров</SPAN> – список 
            спецификаций параметров, количество и типы которых фиксированы и 
            известны в момент компиляции. Эти параметры можно назвать 
            обязательными.</P>
            <DIV id=mark_26 class=lecture_mark></DIV>
            <P id=id_30>После списка обязательных параметров ставится запятая, а 
            затем многоточие (...), которое показывает, что дальнейший контроль 
            соответствия количества и типов параметров при обработке вызова 
            функции производить не нужно. При обращении к функции все параметры: 
            и обязательные, и необязательные – будут размещаться в памяти друг 
            за другом. Следовательно, определив адрес обязательного параметра 
            как <SPAN class=texample>*p=&amp;k</SPAN>, где <SPAN 
            class=texample>p</SPAN> – указатель, а <SPAN class=texample>k</SPAN> 
            – обязательный параметр, можно получить адреса и всех остальных 
            параметров: оператор <SPAN class=texample>k++;</SPAN> выполняет 
            переход к следующему параметру списка. Еще одна сложность 
            заключается в определении конца списка параметров, поэтому каждая 
            функция с переменным числом параметров должна иметь механизм 
            определения количества и типов параметров. Существует два 
            подхода:</P>
            <DIV id=mark_30 class=lecture_mark></DIV>
            <OL id=id_35>
              <LI>известно количество параметров, которое передается как 
              обязательный параметр (см. <SPAN class=xml_em_italic>Пример 
              1</SPAN>);
              <LI>известен признак конца списка параметров (см. <SPAN 
              class=xml_em_italic>Пример 2</SPAN>).</LI></OL>
            <DIV id=mark_35 class=lecture_mark></DIV>
            <P id=id_38><SPAN class=xml_em_italic>Пример 1</SPAN>. Найти сумму 
            последовательности чисел, если известно количество чисел.</P>
            <DIV id=mark_38 class=lecture_mark></DIV>
            <DIV class=example><PRE>#include "stdafx.h"
#include &lt;iostream&gt;
using namespace std;
float sum(int k,...);
//явный параметр k задает количество чисел

int _tmain(int argc, _TCHAR* argv[]){
  cout &lt;&lt; "\n4+6=" &lt;&lt; sum(2,4,6);
  cout &lt;&lt; "\n1+2+3+4=" &lt;&lt; sum(4,1,2,3,4);
  system("pause");
  return 0;
}
float sum(int k, ...) {
  int *p=&amp;k;//настроили указатель на параметр k
  float s=0;
  for(;k!=0;k--)
    s+=*(++p);
  return s;
}
</PRE></DIV>
            <P id=id_40><SPAN class=xml_em_italic>Пример 2</SPAN>. Найти среднее 
            арифметическое последовательности чисел, если известен признак конца 
            списка параметров (цифра '0').</P>
            <DIV id=mark_40 class=lecture_mark></DIV>
            <DIV class=example><PRE>#include "stdafx.h"
#include &lt;iostream&gt;
using namespace std;
float arifm(int k, ...);

int _tmain(int argc, _TCHAR* argv[]){ 
  cout &lt;&lt; "\n(4+6)/2=" &lt;&lt; arifm(4,6,0);
  cout &lt;&lt; "\n(1+2+3+4)/4=" &lt;&lt; arifm(1,2,3,4,0);
  system("pause");
  return 0;
}
float arifm(int k, ...) {
  int *p=&amp;k;//настроили указатель на параметр k
  float s=*p; //значение первого параметра присвоили s
  int i;
  for(i=1;(*p)!=0;i++) //пока нет конца списка
    s+=*(++p);
  return s/(i-1);
}
</PRE></DIV><A name=sect4></A>
            <H3>Проблемы, связанные с использованием указателей</H3>
            <P id=id_42>Указатели придают мощь и изящность программному коду. 
            Кроме того, они необходимы в большинстве программ. Но когда 
            указатель содержит неправильное значение, он может вызвать наиболее 
            трудно устранимую ошибку. Сам по себе указатель не вызывает никаких 
            проблем. Проблемы возникают, когда выполняется какая-либо операция, 
            использующая неправильный указатель, например, производится чтение 
            или запись в неизвестный участок памяти. При чтении в худшем случае 
            в результате будет прочитан "мусор". При записи можно затереть 
            участки кода или данных. В результате этого при поиске ошибки можно 
            найти ее совсем в другом месте. Не существует очевидного способа для 
            разрешения проблем, связанных с указателями.</P>
            <DIV id=mark_42 class=lecture_mark></DIV>
            <P id=id_43>Поскольку ошибки с указателями приводят к ужасающим 
            последствиям, то лучше этого не допускать. С этой целью здесь 
            рассмотрены две наиболее общие ошибки.</P>
            <DIV id=mark_43 class=lecture_mark></DIV>
            <P id=id_44>Классическим примером ошибки с указателем является 
            неинициализированный указатель. Например:</P>
            <DIV id=mark_44 class=lecture_mark></DIV>
            <DIV class=example><PRE>// программа некорректна  
void main (){
  int x, *p;
  x = 10;
  *p = x;
}
</PRE></DIV>
            <P id=id_46>Данная программа присваивает значение 10 некоторому 
            неизвестному участку памяти. Указатель <SPAN class=texample>p</SPAN> 
            не получал адреса памяти, которую можно использовать. Следовательно, 
            он содержит неопределенное значение. Такого рода проблемы часто 
            незаметны, когда программа невелика, поскольку <SPAN 
            class=texample>p</SPAN>, скорее всего, содержит "безопасный" адрес, 
            не принадлежащий коду, данным, стеку или операционной системе. По 
            мере роста программы растет и вероятность того, что неправильное 
            использование указателя испортит жизненно важную часть программы. 
            Неожиданно программа может зависнуть. Направление решения таких 
            проблем совершенно очевидно: следует убедиться, что указатель 
            указывает на некоторую допустимую область. Хотя в таких случаях 
            ошибки достаточно непросто обнаружить: частая инициализация 
            указателей (или некорректная инициализация) затрудняет поиск 
            ошибок.</P>
            <DIV id=mark_46 class=lecture_mark></DIV>
            <P id=id_49>Следующая типичная ошибка возникает из-за недоразумений 
            по использованию указателя. Например, следующая программа содержит 
            ошибку:</P>
            <DIV id=mark_49 class=lecture_mark></DIV>
            <DIV class=example><PRE>// программа некорректна  
void main (){
  int x, *p;
  x = 10;
  p = x;
  printf("%d",*p);
}
</PRE></DIV>
            <P id=id_51>Вызов <SPAN class=texample>printf()</SPAN> не выводит 
            значения <SPAN class=texample>x</SPAN>, которое равно 10, на экран. 
            В результате возникает ошибка из-за неправильного оператора 
            присваивания</P>
            <DIV id=mark_51 class=lecture_mark></DIV>
            <DIV class=example><PRE>p = x;
</PRE></DIV>
            <P id=id_55>Этот оператор присваивает значение 10 указателю <SPAN 
            class=texample>р</SPAN>, который должен содержать адрес, а не 
            значение. Для устранения ошибки следует написать</P>
            <DIV id=mark_55 class=lecture_mark></DIV>
            <DIV class=example><PRE>p = &amp;x;
</PRE></DIV>
            <P id=id_58>Хотя С++ выдает предупреждения об ошибках в программе, 
            они не всегда могут помочь. Данные типы ошибок могут потребовать 
            окольных путей по их обнаружению. Поэтому следует быть внимательным. 
            Тот факт, что указатели могут вызвать очень сложные ошибки при 
            некорректном использовании, не имеет никакого отношения к устранению 
            этих ошибок.</P>
            <DIV id=mark_58 class=lecture_mark></DIV><A name=sect5></A>
            <H3>Ключевые термины</H3>
            <P id=id_59><B>Многочисленное перенаправление</B> – это адресация 
            указателем адреса другого указателя, что в конечном итоге сводится к 
            адресации участка памяти.</P>
            <DIV id=mark_59 class=lecture_mark></DIV>
            <P id=id_60><B>Необязательные параметры</B> – это неизвестные на 
            момент компиляции параметры в прототипе функции.</P>
            <DIV id=mark_60 class=lecture_mark></DIV>
            <P id=id_61><B>Обязательные параметры</B> – это известные на момент 
            компиляции параметры в прототипе функции. </P>
            <DIV id=mark_61 class=lecture_mark></DIV>
            <P id=id_62><B>Одиночное перенаправление</B> – это адресация 
            указателем некоторого участка памяти.</P>
            <DIV id=mark_62 class=lecture_mark></DIV>
            <P id=id_63><B>Указатель на указатель</B> – это указатель, 
            реализующий многочисленное перенаправление.</P>
            <DIV id=mark_63 class=lecture_mark></DIV>
            <P id=id_64><B>Функции с переменным числом параметров</B> – это 
            функции, полный список параметров у которых может быть неизвестен на 
            момент компиляции программы.</P>
            <DIV id=mark_64 class=lecture_mark></DIV><A name=sect6></A>
            <H3>Краткие итоги</H3>
            <OL id=id_65>
              <LI>Указатель может реализовать одиночное или многочисленное 
              перенаправление в зависимости от его объявления.
              <LI>Для получения значения, адресуемого указателем при 
              многочисленном перенаправлении, необходимо применить операцию 
              разыменования несколько раз.
              <LI>В языке С++ предусмотрены объявление и вызов функций с 
              переменным числом параметров.
              <LI>В прототипе функции с переменным числом параметров описываются 
              спецификации обязательных параметров, список необязательных 
              параметров обозначается многоточием.
              <LI>Для функций с переменным числом параметров существуют два 
              основных способа контроля количества параметров в списке: через 
              передачу количества параметров и по признаку конца списка 
              параметров.
              <LI>Использование указателей в программах требует внимательно 
              относиться к их инициализации, присваиванию значений, выполнению 
              операций. Ошибки, связанные с указателями, относятся к 
              трудноустранимым.</LI></OL>
            <DIV id=mark_65 class=lecture_mark></DIV><A name=sect7></A>
            <H3>Лабораторная работа 6. Решение задач с использованием 
            указателей</H3>
            <P id=id_72><B>Цель работы:</B> изучить функции с переменным числом 
            параметров и приемов построения программ, используя указатели, 
            научиться решать задачи с использованием функций с переменным числом 
            параметров в языке С++.</P>
            <DIV id=mark_72 class=lecture_mark></DIV>
            <P id=id_73>При выполнении лабораторной работы для каждого задания 
            требуется написать программу на языке С++, которая получает на входе 
            данные различных типов (в соответствии с условиями задач), выполняет 
            их обработку в соответствии с требованиями задания и выводит 
            результат на экран. Ввод данных осуществляется с клавиатуры с учетом 
            требований к входным данным, содержащихся в постановке задачи. 
            Ограничениями на входные данные является допустимый диапазон 
            значений используемых числовых типов в языке С++.</P>
            <DIV id=mark_73 class=lecture_mark></DIV>
            <P id=id_74><B>Теоретические сведения.</B></P>
            <DIV id=mark_74 class=lecture_mark></DIV>
            <P id=id_75>Выполните приведенные ниже задания.</P>
            <DIV id=mark_75 class=lecture_mark></DIV>
            <OL id=id_76>
              <LI>Напишите функцию, параметрами которой служат адреса трех 
              переменных типа <SPAN class=texample>double</SPAN>. Функция должна 
              возвращать адрес (значение указателя) той из переменных, 
              адресуемых параметрами, которая имеет максимальное значение. В 
              основной программе с помощью обращения к функции поменяйте знак 
              значения максимальной из трех переменных. Для решения данной 
              задачи используйте вспомогательную функцию, возвращающую адрес 
              максимальной из переменных, адресуемых двумя 
              параметрами-указателями.
              <LI>Напишите функцию для вычисления значения многочлена <SPAN 
              class=texample>P<SUB>n</SUB>(x)=a<SUB>n</SUB>x<SUP>n</SUP>+a<SUB>n-1</SUB>x<SUP>n-1</SUP>+...+a<SUB>1</SUB>x<SUP>1</SUP>+a<SUB>0</SUB></SPAN>. 
              Коэффициенты <SPAN 
              class=texample>a<SUB>n</SUB>,a<SUB>n-1</SUB>,...,a<SUB>0</SUB></SPAN>, 
              аргумент <SPAN class=texample>x</SPAN> и коэффициенты передавайте 
              в функцию с помощью списка параметров изменяемой длины. В основной 
              программе вычислите и напечатайте значения нескольких полиномов. 
              Для вычисления полиномов используйте схему Горнера: 
              <DIV class=example><PRE>P<SUB>n</SUB>(x)=(...(a<SUB>n</SUB>x+a<SUB>n-1</SUB>)x+a<SUB>n-2</SUB>)x+...+a<SUB>1</SUB>)x+a<SUB>0</SUB>.
</PRE></DIV>
              <LI>Напишите функцию, которая упорядочивает значение трех 
              переменных, адреса которых передаются ей в качестве параметров. В 
              основной программе продемонстрируйте применение написанной 
              функции. Для решения данной задачи определите и используйте 
              вспомогательную функцию, которая упорядочивает значения только 
              двух переменных, адресуемых ее двумя аргументами.
              <LI>Напишите функцию с переменным числом параметров в соответствии 
              с заданием, продемонстрировать вызов функции с различным числом 
              параметров. Выполните вычисления для трех и десяти чисел. Решите 
              задачу двумя способами: через передачу количества параметров как 
              параметр функции и через использование признака конца списка 
              параметров. В задаче требуется найти среднее гармоническое 
              элементов числового ряда.</LI></OL>
            <DIV id=mark_76 class=lecture_mark></DIV>
            <P id=id_86><B>Указания к выполнению работы.</B></P>
            <DIV id=mark_86 class=lecture_mark></DIV>
            <P id=id_87>Каждое задание необходимо решить в соответствии с 
            изученными методами использования указателей на объекты и указателей 
            на функции в языке С++. Программу для решения каждого задания 
            необходимо разработать методом процедурной абстракции, используя 
            указатели на объекты и указатели на функции, а также функции в 
            качестве параметров функций. Этапы решения задач сопроводить 
            комментариями в коде.</P>
            <DIV id=mark_87 class=lecture_mark></DIV>
            <P id=id_88>Следует реализовать каждое задание в соответствии с 
            приведенными этапами:</P>
            <DIV id=mark_88 class=lecture_mark></DIV>
            <UL id=id_89>
              <LI>изучить словесную постановку задачи, выделив при этом все виды 
              данных;
              <LI>сформулировать математическую постановку задачи;
              <LI>выбрать метод решения задачи, если это необходимо;
              <LI>разработать графическую схему алгоритма;
              <LI>записать разработанный алгоритм на языке С++;
              <LI>разработать контрольный тест к программе;
              <LI>отладить программу;
              <LI>представить отчет по работе.</LI></UL>
            <DIV id=mark_89 class=lecture_mark></DIV>
            <P id=id_98><B>Требования к отчету.</B></P>
            <DIV id=mark_98 class=lecture_mark></DIV>
            <P id=id_99>Отчет по лабораторной работе должен соответствовать 
            следующей структуре.</P>
            <DIV id=mark_99 class=lecture_mark></DIV>
            <UL id=id_100>
              <LI>Титульный лист.
              <LI>Словесная постановка задачи. В этом подразделе проводится 
              полное описание задачи. Описывается суть задачи, анализ входящих в 
              нее физических величин, область их допустимых значений, единицы их 
              измерения, возможные ограничения, анализ условий при которых 
              задача имеет решение (не имеет решения), анализ ожидаемых 
              результатов.
              <LI>Математическая модель. В этом подразделе вводятся 
              математические описания физических величин и математическое 
              описание их взаимодействий. Цель подраздела – представить решаемую 
              задачу в математической формулировке.
              <LI>Алгоритм решения задачи. В подразделе описывается разработка 
              структуры алгоритма, обосновывается абстракция данных, задача 
              разбивается на подзадачи. Схема алгоритма выполняется по ЕСПД 
              (ГОСТ 19.003-80 и ГОСТ 19.002-80).
              <LI>Листинг программы. Подраздел должен содержать текст программы 
              на языке программирования С++, реализованный в среде MS Visual 
              Studio 2010.
              <LI>Контрольный тест. Подраздел содержит наборы исходных данных и 
              полученные в ходе выполнения программы результаты.
              <LI>Выводы по лабораторной работе. 
              <LI>Ответы на контрольные вопросы.</LI></UL>
            <DIV id=mark_100 class=lecture_mark></DIV>
            <P id=id_109><B>Контрольные вопросы</B></P>
            <DIV id=mark_109 class=lecture_mark></DIV>
            <OL id=id_110>
              <LI>С какой целью в программах используют указатели на указатели?
              <LI>Что будет являться результатом однократной операции 
              разыменования указателя, реализующего многочисленное 
              перенаправление?
              <LI>Для чего в программе необходима инициализация указателя перед 
              первым его использованием?
              <LI>С какой целью в прототипах функций с переменным числом 
              параметров должны быть указаны обязательные параметры?
              <LI>Как в функции с переменным числом параметров осуществляется 
              доступ к списку неизвестных параметров?
              <LI>Почему для доступа к списку неизвестных параметров достаточно 
              знать адрес хотя бы одного обязательного параметра?
              <LI>Почему ошибки, связанные с некорректным использованием 
              указателей, относятся к наиболее трудноустранимым?</LI></OL>
            <DIV id=mark_110 class=lecture_mark></DIV></TD></TR>
        <TR>
          <TD height=8><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=8></TD></TR></TBODY></TABLE><!-- /content --></TD>
    <TD><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=8 height=1></TD></TR></TBODY></TABLE><!-- /bottom -->
<TABLE border=0 cellSpacing=0 cellPadding=0 width="100%">
  <TBODY>
  <TR>
    <TD class=orang height=1><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=1 height=1></TD></TR>
  <TR>
    <TD class=ltxt align=center>© INTUIT.ru, 2003-2010. Все права 
  защищены.</TD></TR></TBODY></TABLE><!-- /bottom -->
<SCRIPT type=text/javascript 
src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/urchin.js">
</SCRIPT>

<SCRIPT 
type=text/javascript>
_uacct = "UA-3475067-1";
urchinTracker();
</SCRIPT>
</BODY></HTML>
