<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0069)http://www.intuit.ru/department/algorithms/staldata/9/staldata_9.html -->
<HTML><HEAD><TITLE>INTUIT.ru::Интернет-Университет Информационных Технологий</TITLE>
<META content="text/html; charset=windows-1251" http-equiv=Content-Type><LINK 
rel=stylesheet type=text/css 
href="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/printable.css">
<META name=GENERATOR content="MSHTML 9.00.8080.16413"></HEAD>
<BODY leftMargin=6 topMargin=6 marginwidth="6" marginheight="6">
<DIV align=left><SPAN style="COLOR: #000000; FONT-WEIGHT: bold">&nbsp;&nbsp; 
<SPAN style="FONT-SIZE: 12pt">Интернет-Университет Информационных 
Технологий</SPAN> </SPAN></DIV>&nbsp;&nbsp; <SPAN 
style="COLOR: #330066; TEXT-DECORATION: underline" 
align="rright">http://www.INTUIT.ru</SPAN> 
<TABLE border=0 cellSpacing=0 cellPadding=0 width="100%">
  <TBODY>
  <TR>
    <TD height=8 colSpan=3><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=1 height=8></TD></TR>
  <TR>
    <TD class=orang height=1 colSpan=3><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=1 height=1></TD></TR>
  <TR>
    <TD height=8 colSpan=3><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=1 height=8></TD></TR>
  <TR vAlign=top>
    <TD><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=8 height=1></TD>
    <TD><!-- content -->
      <TABLE border=0 cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD class=head>Структуры и алгоритмы компьютерной обработки 
        данных</TD></TR>
        <TR>
          <TD height=4><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=4></TD></TR>
        <TR>
          <TD class=orang height=1><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=1></TD></TR>
        <TR>
          <TD height=8><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=8></TD></TR>
        <TR>
          <TD><SPAN class=headsub>9. Лекция: Решение задач на обработку строк: 
            версия для печати и PDA</SPAN> <BR><SPAN class=rtxt>В лекции 
            рассматриваются понятие, способы объявления, инициализация 
            указателей на строки, применение функций обработки строк при решении 
            типовых задач, особенности выполнения стандартных функций в 
            контексте представления строк и указателей на строки. </SPAN></TD></TR>
        <TR>
          <TD height=8><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=8></TD></TR>
        <TR>
          <TD class=orang height=1><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=1></TD></TR>
        <TR>
          <TD height=8><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=8></TD></TR>
        <TR>
          <TD><A name=sect1></A>
            <H3></H3>
            <P id=id_1><B>Цель лекции:</B> изучить принципы работы со строками и 
            указателями на строки, алгоритмы решения задач на обработку 
            строковых данных, научиться приемам решения задач на обработку 
            строк, используя, функции для работы со строками и указателями на 
            строки в языке С++.</P>
            <DIV id=mark_1 class=lecture_mark></DIV><A name=sect2></A>
            <H3>Строки и указатели</H3>
            <P id=id_2>Сроки в языке С++ представляют собой массив символов. 
            Поскольку имя массива без индексов является указателем на первый 
            элемент этого массива, то при использовании функций обработки строк 
            им будут передаваться не сами строки, а указатели на них.</P>
            <DIV id=mark_2 class=lecture_mark></DIV>
            <P id=id_3>Так как все строки в языке С++ заканчиваются нулевым 
            символом, который имеет значение &lt;ложь&gt;, то условие в 
            операторе <SPAN class=texample>while(*str)</SPAN> будет истинным до 
            тех пор, пока программа не достигнет конца строки.</P>
            <DIV id=mark_3 class=lecture_mark></DIV>
            <P id=id_5>При разработке функций для работы со строками в 
            большинстве случаев целесообразно применять указатели. Приведем 
            примеры фрагментов программ:</P>
            <DIV id=mark_5 class=lecture_mark></DIV>
            <DIV class=example><PRE>/*Пример пользовательской функции копирования строки s2 в s1*/
char * strcpy_my (char *s1, char *s2){
  char *ptrs1 = s1;
  //указатель инициализирован на начало строки
  while ((*s1++ = *s2++) != 0);
  return ptrs1; //возвращается указатель на строку s1
}
</PRE></DIV>
            <P id=id_7>Следующий пример демонстрирует, что использование 
            нулевого ограничителя упрощает различные операции над строками.</P>
            <DIV id=mark_7 class=lecture_mark></DIV>
            <DIV class=example><PRE>/*Пример пользовательской функции конкатенации*/
char * strcat_my (char *s1, char *s2) {
char *p1, *p2;
p1 = s1; p2 = s2;
while ( *p1 != '\0') p1++; //найти конец 1-ой строки.
                           //или while ( *p1) p1++;
  while ((*p1 = *p2) != 0) {
  /*копировать строку р2, пока не будет скопирован нулевой 
    Ограничитель*/
    p1++;  
    p2++; //Передвинуть указатели к следующему байту
  }       //или while (( *p1++ = *p2++) != 0);/*.
return s1;
}
</PRE></DIV>
            <P id=id_9><SPAN class=xml_em_italic>Пример 1.</SPAN></P>
            <DIV id=mark_9 class=lecture_mark></DIV>
            <DIV class=example><PRE>/*Демонстрация работы с указателями и с функциями для обработки строк*/
#include "stdafx.h"
#include &lt;iostream&gt;
using namespace std;
int _tmain(int argc, _TCHAR* argv[]){
  char string[100], temp[100], *result, simvol;
  int numresult, res;
  /*создает строку "computer program" посредством 
    использования strcpy и strcat*/
  strcpy(string, "computer");
  result = strcat(string," program"); 
  printf("1) создали строку\n%s\n",result);
  /*находит строку, в которой первый раз обнаружено 'a'*/
  simvol='a';
  result = strchr(string,simvol);    
  printf("2) находим в строке первое вхождение символа \'%c\'\n
          %s\n",simvol,result);
  /* создает копию строки */
  result = strcpy(temp,string);
  printf("3) создали копию строку\n%s\n",result);
  /* находит "a","b","c" в строке */
  strcpy(string,"xyzabbc"); 
  res = strcspn(string,"abc");   
  printf("4) определяем длину заданного сегмента \n%d\n",res);
  /*создает новый указатель на строку для дублирования 
    строки*/
  result = strdup(string);   
  printf("5) создали новый указатель на строку \n%s\n",result);
  system("pause");
  return 0;
}
</PRE></DIV>
            <P id=id_11>В предыдущих примерах рассматривалось присваивание 
            указателю адреса только первого элемента символьного массива. Однако 
            это можно делать и с адресом любого отдельного элемента массива 
            путем добавления символа <SPAN class=texample>'&amp;'</SPAN> к 
            индексированному имени. Особенно удобно пользоваться этим правилом 
            при выделении подстроки. Например, следующая программа выводит на 
            экран часть введенной строки после первого пробела:</P>
            <DIV id=mark_11 class=lecture_mark></DIV>
            <P id=id_13><SPAN class=xml_em_italic>Пример 2.</SPAN></P>
            <DIV id=mark_13 class=lecture_mark></DIV>
            <DIV class=example><PRE>/*Вывести на экран часть строки после первого пробела*/
#include "stdafx.h"
#include &lt;iostream&gt;
using namespace std;
int _tmain(int argc, _TCHAR* argv[]){
  char s[80], *p;
  int i;
  printf("ввести строку: ");
  gets(s);
  /*найти первый пробел или конец строки*/
  for(i=0; s[i] &amp;&amp; s[i]!=' '; i++);
  p = &amp;s[i];
  printf(p);
  system("pause");
  return 0;
}
</PRE></DIV>
            <P id=id_15>В этой программе <SPAN class=texample>p</SPAN> будет 
            указывать либо на пробел, если он есть, либо на ноль, если в строке 
            нет пробелов. Если <SPAN class=texample>p</SPAN> указывает на 
            пробел, то программа выведет на экран его и затем остаток строки. 
            Например, если ввести фразу &lt;язык программирования С++&gt;, 
            функция <SPAN class=texample>printf()</SPAN> напечатает сначала 
            пробел и затем &lt;программирования С++&gt;. Если <SPAN 
            class=texample>p</SPAN> укажет на ноль, то на экран ничего не 
            выводится.</P>
            <DIV id=mark_15 class=lecture_mark></DIV>
            <P id=id_20><SPAN class=xml_em_italic>Пример 3:</SPAN></P>
            <DIV id=mark_20 class=lecture_mark></DIV>
            <DIV class=example><PRE>//Выводит каждое отдельное слово и подсчитывает его длину
#include "stdafx.h"
#include &lt;iostream&gt;
using namespace std;
int _tmain(int argc, _TCHAR* argv[]){
  char text[100],*p, *razd=" .,";
  int dlina;
  puts ("Введите текст ");
  gets(text);
  p=strtok(text,razd); // Выделение первого слова текста
  while (p) {  // Пока можно выделить слово
    dlina=strlen(p); // Определение длины слова
    cout &lt;&lt; "\n слово "&lt;&lt; p &lt;&lt; " длина = " &lt;&lt; dlina &lt;&lt;"\n";
    p=strtok(NULL,razd); 
    //Выделение второго, третьего, и т.д. слов
  } 
  system("pause");
  return 0;
}
</PRE></DIV>
            <P id=id_22>При использовании строк или указателей на строки в 
            качестве параметров функций следует учитывать некоторые 
            особенности.</P>
            <DIV id=mark_22 class=lecture_mark></DIV>
            <P id=id_23>При передаче строки как параметра функции не указывается 
            длина, так как ограничителем является символ конца строки.</P>
            <DIV id=mark_23 class=lecture_mark></DIV>
            <P id=id_24>Строки передаются в функции в качестве параметров как 
            массивы символов или как указатели типа <SPAN 
            class=texample>char</SPAN>.</P>
            <DIV id=mark_24 class=lecture_mark></DIV>
            <P id=id_26>При побайтовом копировании строки или ее подстроки без 
            использования стандартных функций формируемую строку следует 
            завершить, дописав символ конца строки. В противном случае строка не 
            воспринимается как единое целое, а при выходе за ее границы 
            доступными становятся байты, содержащие "мусор", то есть 
            непредсказуемую информацию.</P>
            <DIV id=mark_26 class=lecture_mark></DIV>
            <P id=id_27>Обращение к строкам через указатели позволяет вносить и 
            сохранять изменения, записанные в адресуемой области памяти. Для 
            недопущения изменений в строке указатель на константу можно объявить 
            с лексемой <SPAN class=texample>const</SPAN> следующим образом: 
            <SPAN class=texample>const char *p;</SPAN>.</P>
            <DIV id=mark_27 class=lecture_mark></DIV>
            <P id=id_30>В силу специфики представления строк в виде символьного 
            массива сами строки, строковые константы, заключенные в кавычки, и 
            указатели на строки обрабатываются эквивалентно. При этом каждый 
            такой элемент адресует область памяти и передается в функции как 
            адрес.</P>
            <DIV id=mark_30 class=lecture_mark></DIV>
            <P id=id_31>При копировании строки или подстроки с использованием 
            указателя не создается <SPAN class=xml_em_italic>физической 
            копии</SPAN> значений элементов. Объявленный новый указатель 
            адресует то место в памяти, с которого начинается копируемая строка 
            или подстрока. Например:</P>
            <DIV id=mark_31 class=lecture_mark></DIV>
            <DIV class=example><PRE>char text[50]="Язык программирования";
char *p=text, *pp;
//объявление и инициализация указателя р адресом строки text
pp=p;
//указатель рр адресует ту же строку text
</PRE></DIV>
            <P id=id_33>Адресация на тот же участок памяти объясняется, 
            во-первых, неэффективностью повторного хранения уже имеющихся 
            данных, во-вторых, относительной программной трудоемкостью 
            копирования байтов, в-третьих, для хранения адреса строки требуется 
            гораздо меньше места, чем для самой строки. В данном контексте 
            понятие эффективности носит относительный характер, так как иногда в 
            программе полезным бывает хранение резервной копии введенных 
            данных.</P>
            <DIV id=mark_33 class=lecture_mark></DIV><A name=sect3></A>
            <H3>Ключевые термины</H3>
            <P id=id_34><B>Адрес строки</B> – это указатель на блок непрерывной 
            области памяти, с которого начинает располагаться массив 
            символов.</P>
            <DIV id=mark_34 class=lecture_mark></DIV>
            <P id=id_35><B>Строки как параметры функций</B> – это описание 
            передачи значений строк в функции как массив символов или указатель 
            типа char.</P>
            <DIV id=mark_35 class=lecture_mark></DIV>
            <P id=id_36><B>Указатель на строку</B> – адрес начала расположения 
            стоки в памяти.</P>
            <DIV id=mark_36 class=lecture_mark></DIV><A name=sect4></A>
            <H3>Краткие итоги</H3>
            <OL id=id_37>
              <LI>В силу специфики представления строк в виде символьного 
              массива сами строки, строковые константы, заключенные в кавычки, и 
              указатели на строки обрабатываются эквивалентно.
              <LI>Строки передаются в функции в качестве параметров как массивы 
              символов или как указатели типа char.
              <LI>Обращение к конкретному элементу строки можно осуществить 
              посредством адресации индексированного имени строки.
              <LI>При формировании строки без использования стандартных функций 
              требуется дописывать символ конца строки.
              <LI>С помощью указателей на константы можно защитить строку от 
              изменений.
              <LI>Копирование строк с помощью указателей осуществляется через 
              объявление нового указателя, адресующего область памяти, 
              занимаемую строкой или подстрокой.</LI></OL>
            <DIV id=mark_37 class=lecture_mark></DIV><A name=sect5></A>
            <H3>Лабораторная работа 9. Решение задач на обработку строк</H3>
            <P id=id_44><B>Цель работы:</B> изучить принципы работы со строками 
            и указателями на строки, алгоритмы решения задач на обработку 
            строковых данных, научиться приемам решения задач на обработку 
            строк, используя, функции для работы со строками и указателями на 
            строки в языке С++.</P>
            <DIV id=mark_44 class=lecture_mark></DIV>
            <P id=id_45>При выполнении лабораторной работы для каждого задания 
            требуется написать программу на языке С++, которая получает на входе 
            одну или несколько строк символов (в зависимости от постановки 
            задачи), выполняет обработку строк в соответствии с требованиями 
            задания и выводит результат на экран. Ввод данных осуществляется с 
            клавиатуры с учетом требований к входным данным, содержащихся в 
            постановке задачи (к задачам 2 и 3 приведен рекомендуемый вид 
            диалога во время работы программы). Ограничениями на входные данные 
            является максимальный размер строковых данных в языке С++.</P>
            <DIV id=mark_45 class=lecture_mark></DIV>
            <P id=id_46><B>Теоретические сведения.</B></P>
            <DIV id=mark_46 class=lecture_mark></DIV>
            <P id=id_47>Ознакомьтесь с материалом лекции 9.</P>
            <DIV id=mark_47 class=lecture_mark></DIV>
            <P id=id_48><B>Задания к лабораторной работе.</B></P>
            <DIV id=mark_48 class=lecture_mark></DIV>
            <P id=id_49>Выполните приведенные ниже задания.</P>
            <DIV id=mark_49 class=lecture_mark></DIV>
            <OL id=id_50>
              <LI>Дана строка, в которой слова разделены одним пробелом. Найдите 
              и распечатайте все слова указанной длины <SPAN 
              class=texample>n</SPAN>.
              <LI>Дана строка из символов латинского алфавита. Вставьте пробел 
              перед каждой заглавной буквой. Перед первой буквой пробел 
              добавлять не надо. Ниже представлен рекомендуемый вид диалога во 
              время работы программы. Данные, вводимые пользователем, выделены 
              жирным шрифтом. 
              <DIV class=example><PRE>Введите строку символов латинского алфавита:
AtTimesYouMayWantToReadDataFromTheKeyBoard
Полученная строка: At Times You May Want To Read Data 
From The Key Board
</PRE></DIV>
              <LI>Написать программу, которая вычисляет значение выражения <SPAN 
              class=texample>N<SUB>0</SUB>O<SUB>1</SUB>N<SUB>1</SUB>O<SUB>2</SUB>...O<SUB>k</SUB>N<SUB>k</SUB></SPAN>, 
              где <SPAN class=texample>N<SUB>i</SUB></SPAN> – целое число, <SPAN 
              class=texample>O<SUB>i</SUB></SPAN> – один из двух знаков 
              простейших арифметических действий: сложение (+) и вычитание (–). 
              Считать, что данные введены корректно: в строке заданы только 
              цифры и указанные знаки действий. Ниже представлен рекомендуемый 
              вид диалога во время работы программы. Данные, вводимые 
              пользователем, выделены жирным шрифтом. 
              <DIV class=example><PRE>Введите арифметическое выражение,
например, 45+5-3-125+2 (пробелы и другие знаки недопустимы)
354-457+74+2-37
Значение выражения 354-457+74+2-37 = -64 
</PRE></DIV>
              <LI>Дана строка. Проверьте правильность расстановки в ней круглых 
              скобок: каждой открытой скобке должна соответствовать корректно 
              закрытая скобка.
              <LI>Найдите в строке самый часто встречающийся символ. 
              Распечатайте символ и число его повторений.</LI></OL>
            <DIV id=mark_50 class=lecture_mark></DIV>
            <P id=id_62><B>Указания к выполнению работы.</B></P>
            <DIV id=mark_62 class=lecture_mark></DIV>
            <P id=id_63>Каждое задание необходимо решить в соответствии с 
            изученными методами обработки строковых и символьных данных в языке 
            С++. При разработке программного кода требуется использовать метод 
            процедурной абстракции и комментировать фрагменты кода.</P>
            <DIV id=mark_63 class=lecture_mark></DIV>
            <P id=id_64>Следует реализовать каждое задание в соответствии с 
            приведенными этапами:</P>
            <DIV id=mark_64 class=lecture_mark></DIV>
            <UL id=id_65>
              <LI>изучить словесную постановку задачи, выделив при этом все виды 
              данных;
              <LI>сформулировать математическую постановку задачи;
              <LI>выбрать метод решения задачи, если это необходимо;
              <LI>разработать графическую схему алгоритма;
              <LI>записать разработанный алгоритм на языке С++;
              <LI>разработать контрольный тест к программе;
              <LI>отладить программу;
              <LI>представить отчет по работе.</LI></UL>
            <DIV id=mark_65 class=lecture_mark></DIV>
            <P id=id_74><B>Требования к отчету.</B></P>
            <DIV id=mark_74 class=lecture_mark></DIV>
            <P id=id_75>Отчет по лабораторной работе должен соответствовать 
            следующей структуре.</P>
            <DIV id=mark_75 class=lecture_mark></DIV>
            <UL id=id_76>
              <LI>Титульный лист.
              <LI>Словесная постановка задачи. В этом подразделе проводится 
              полное описание задачи. Описывается суть задачи, анализ входящих в 
              нее физических величин, область их допустимых значений, единицы их 
              измерения, возможные ограничения, анализ условий при которых 
              задача имеет решение (не имеет решения), анализ ожидаемых 
              результатов.
              <LI>Математическая модель. В этом подразделе вводятся 
              математические описания физических величин и математическое 
              описание их взаимодействий. Цель подраздела – представить решаемую 
              задачу в математической формулировке.
              <LI>Алгоритм решения задачи. В подразделе описывается разработка 
              структуры алгоритма, обосновывается абстракция данных, задача 
              разбивается на подзадачи. Схема алгоритма выполняется по ЕСПД 
              (ГОСТ 19.003-80 и ГОСТ 19.002-80).
              <LI>Листинг программы. Подраздел должен содержать текст программы 
              на языке программирования С++, реализованный в среде MS Visual 
              Studio 2010.
              <LI>Контрольный тест. Подраздел содержит наборы исходных данных и 
              полученные в ходе выполнения программы результаты.
              <LI>Выводы по лабораторной работе. 
              <LI>Ответы на контрольные вопросы.</LI></UL>
            <DIV id=mark_76 class=lecture_mark></DIV>
            <P id=id_85><B>Контрольные вопросы</B></P>
            <DIV id=mark_85 class=lecture_mark></DIV>
            <OL id=id_86>
              <LI>Почему обращения к строке через ее имя и через указатель 
              эквивалентны?
              <LI>Почему в качестве параметра функции передается адрес строки, а 
              не сама строка символов?
              <LI>Возможно ли применение операций инкремента и декремента к 
              указателю на строку? Если да, то что будет адресовать полученный 
              указатель?
              <LI>Почему при формировании строки без использования стандартных 
              функций необходимо дописывать символ конца строки? Почему этого не 
              требуется при считывании строк с клавиатуры?
              <LI>Какие возможны ошибки в программе при некорректной работе со 
              строками?
              <LI>Для защиты строки от изменения объявляется указатель на 
              константу или указатель-константа? Почему? </LI></OL>
            <DIV id=mark_86 class=lecture_mark></DIV></TD></TR>
        <TR>
          <TD height=8><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=8></TD></TR></TBODY></TABLE><!-- /content --></TD>
    <TD><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=8 height=1></TD></TR></TBODY></TABLE><!-- /bottom -->
<TABLE border=0 cellSpacing=0 cellPadding=0 width="100%">
  <TBODY>
  <TR>
    <TD class=orang height=1><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=1 height=1></TD></TR>
  <TR>
    <TD class=ltxt align=center>© INTUIT.ru, 2003-2010. Все права 
  защищены.</TD></TR></TBODY></TABLE><!-- /bottom -->
<SCRIPT type=text/javascript 
src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/urchin.js">
</SCRIPT>

<SCRIPT 
type=text/javascript>
_uacct = "UA-3475067-1";
urchinTracker();
</SCRIPT>
</BODY></HTML>
