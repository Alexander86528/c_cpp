<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0069)http://www.intuit.ru/department/algorithms/staldata/5/staldata_5.html -->
<HTML><HEAD><TITLE>INTUIT.ru::Интернет-Университет Информационных Технологий</TITLE>
<META content="text/html; charset=windows-1251" http-equiv=Content-Type><LINK 
rel=stylesheet type=text/css 
href="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/printable.css">
<META name=GENERATOR content="MSHTML 9.00.8080.16413"></HEAD>
<BODY leftMargin=6 topMargin=6 marginwidth="6" marginheight="6">
<DIV align=left><SPAN style="COLOR: #000000; FONT-WEIGHT: bold">&nbsp;&nbsp; 
<SPAN style="FONT-SIZE: 12pt">Интернет-Университет Информационных 
Технологий</SPAN> </SPAN></DIV>&nbsp;&nbsp; <SPAN 
style="COLOR: #330066; TEXT-DECORATION: underline" 
align="rright">http://www.INTUIT.ru</SPAN> 
<TABLE border=0 cellSpacing=0 cellPadding=0 width="100%">
  <TBODY>
  <TR>
    <TD height=8 colSpan=3><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=1 height=8></TD></TR>
  <TR>
    <TD class=orang height=1 colSpan=3><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=1 height=1></TD></TR>
  <TR>
    <TD height=8 colSpan=3><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=1 height=8></TD></TR>
  <TR vAlign=top>
    <TD><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=8 height=1></TD>
    <TD><!-- content -->
      <TABLE border=0 cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD class=head>Структуры и алгоритмы компьютерной обработки 
        данных</TD></TR>
        <TR>
          <TD height=4><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=4></TD></TR>
        <TR>
          <TD class=orang height=1><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=1></TD></TR>
        <TR>
          <TD height=8><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=8></TD></TR>
        <TR>
          <TD><SPAN class=headsub>5. Лекция: Тип указатель: указатели на 
            функции: версия для печати и PDA</SPAN> <BR><SPAN class=rtxt>В 
            лекции рассматриваются определение указателя на функцию, способы 
            объявления, адресуемость и обращение к функции через указатель, 
            передачу фактических параметров указателю на функцию, использование 
            указателя на функцию в качестве параметра функции. </SPAN></TD></TR>
        <TR>
          <TD height=8><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=8></TD></TR>
        <TR>
          <TD class=orang height=1><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=1></TD></TR>
        <TR>
          <TD height=8><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=8></TD></TR>
        <TR>
          <TD><A name=sect1></A>
            <H3></H3>
            <P id=id_1><B>Цель лекции:</B> изучить указатели на функции и методы 
            передачи функций как параметров, научиться использовать указатели на 
            функции в программных кодах на языке C++.</P>
            <DIV id=mark_1 class=lecture_mark></DIV>
            <P id=id_2>Функции, как и элементы данных, имеют адреса. Адресом 
            функции является адрес памяти, с которого начинается машинный код 
            функции.</P>
            <DIV id=mark_2 class=lecture_mark></DIV>
            <P id=id_3>Для того, чтобы использовать в программе указатель на 
            функцию, необходимо выполнить следующие действия:</P>
            <DIV id=mark_3 class=lecture_mark></DIV>
            <UL id=id_4>
              <LI>принять адрес функции;
              <LI>объявить указатель на функцию;
              <LI>использовать указатель на функцию для вызова этой 
            функции.</LI></UL>
            <DIV id=mark_4 class=lecture_mark></DIV>
            <P id=id_8>Каждая функция характеризуется типом возвращаемого 
            значения, именем и списком типов ее параметров. Если имя функции 
            использовать без последующих скобок и параметров, то оно будет 
            выступать в качестве указателя на эту функцию, и его значение будет 
            определяться как адрес размещения функции в памяти (первый байт). 
            Это значение можно будет присвоить другому указателю. Тогда этот 
            новый указатель можно будет использовать для вызова функции. 
            Указатель на функцию как переменная вводится отдельно от определения 
            и объявления (прототипа) какой-либо функции.</P>
            <DIV id=mark_8 class=lecture_mark></DIV>
            <P id=id_9><B>Указатель на функцию</B> – переменная, которая 
            содержит адрес некоторой функции. Соответственно, косвенное 
            обращение по этому указателю представляет собой вызов функции. </P>
            <DIV id=mark_9 class=lecture_mark></DIV>
            <P id=id_10>Синтаксис определения указателя на функцию:</P>
            <DIV id=mark_10 class=lecture_mark></DIV>
            <DIV class=example><PRE>тип_функции(*имя_указателя)(спецификация_параметров)
</PRE></DIV>
            <P id=id_12>где <SPAN class=texample>тип_функции</SPAN> – определяет 
            тип возвращаемого функцией значения; <SPAN 
            class=texample>имя_указателя</SPAN> – идентификатор; <SPAN 
            class=texample>спецификация_параметров</SPAN> – определяет состав и 
            типы параметров функции.</P>
            <DIV id=mark_12 class=lecture_mark></DIV>
            <P id=id_16>Например:</P>
            <DIV id=mark_16 class=lecture_mark></DIV>
            <DIV class=example><PRE>int (*pf)(); // без контроля параметров вызова
int (*pf)(void); // без параметров, с контролем по прототипу
int (*pf)(int, char*); // с контролем по прототипу
</PRE></DIV>
            <P id=id_18>В соответствии с принципом контекстного определения типа 
            данных эту конструкцию следует понимать так: <SPAN 
            class=texample>pf</SPAN> – переменная, при косвенном обращении к 
            которой вызывается функция с соответствующим прототипом, например 
            <SPAN class=texample>int_F(int, char*)</SPAN>, то есть <SPAN 
            class=texample>pf</SPAN> содержит адрес функции или указатель на 
            функцию. Следует обратить внимание на то, что в определении 
            указателя присутствует прототип – указатель ссылается не на 
            произвольную функцию, а только на одну из функций с заданной схемой 
            формальных параметров и результата.</P>
            <DIV id=mark_18 class=lecture_mark></DIV>
            <P id=id_22>В определении указателя количество и тип параметров 
            должны совпадать с соответствующими типами в определении функции, на 
            которую ставится указатель.</P>
            <DIV id=mark_22 class=lecture_mark></DIV>
            <P id=id_23>Например,</P>
            <DIV id=mark_23 class=lecture_mark></DIV>
            <DIV class=example><PRE>int (*func1Prt)(char);
</PRE></DIV>
            <P id=id_25>задает определение указателя <SPAN 
            class=texample>func1Prt</SPAN> на функцию с параметром типа <SPAN 
            class=texample>char</SPAN>, возвращающую значение типа <SPAN 
            class=texample>int</SPAN>.</P>
            <DIV id=mark_25 class=lecture_mark></DIV>
            <P id=id_29>Важнейшим элементом в определении указателя на функцию 
            являются круглые скобки. Так следующий фрагмент:</P>
            <DIV id=mark_29 class=lecture_mark></DIV>
            <DIV class=example><PRE>int *func(char); 
</PRE></DIV>
            <P id=id_31>это не определение указателя, а объявление (прототип) 
            функции c именем <SPAN class=texample>func</SPAN> и параметром типа 
            <SPAN class=texample>char</SPAN>, возвращающей значение указателя 
            типа <SPAN class=texample>int *</SPAN>. В этом случае указатель 
            указывает на значение функции.</P>
            <DIV id=mark_31 class=lecture_mark></DIV>
            <P id=id_35>Если же выполнить объявление:</P>
            <DIV id=mark_35 class=lecture_mark></DIV>
            <DIV class=example><PRE>char *(*func2Prt)(char *,int);
</PRE></DIV>
            <P id=id_37>то определение указателя <SPAN 
            class=texample>func2Prt</SPAN> на функцию с параметрами типа 
            указатель на <SPAN class=texample>char</SPAN> и типа <SPAN 
            class=texample>int</SPAN>, возвращающую значение типа указатель на 
            <SPAN class=texample>char</SPAN>.</P>
            <DIV id=mark_37 class=lecture_mark></DIV>
            <P id=id_42>Синтаксис вызова функции с помощью указателя:</P>
            <DIV id=mark_42 class=lecture_mark></DIV>
            <DIV class=example><PRE>(*имя_указателя)(список_фактических_параметров);
</PRE></DIV>
            <P id=id_44>значением <SPAN class=texample>имя_указателя</SPAN> 
            служит адрес функции, а с помощью операции разыменования <SPAN 
            class=texample>*</SPAN> обеспечивается обращение по адресу к этой 
            функции.</P>
            <DIV id=mark_44 class=lecture_mark></DIV>
            <P id=id_47>Арифметические операции над указателями на функции <SPAN 
            class=xml_em_italic>запрещены</SPAN>.</P>
            <DIV id=mark_47 class=lecture_mark></DIV>
            <P id=id_48>Указатели на функции в основном используются в следующих 
            случаях.</P>
            <DIV id=mark_48 class=lecture_mark></DIV>
            <UL id=id_49>
              <LI>Многие библиотечные функции в качестве аргумента получают 
              указатель на функцию. Например, функция сортировки <SPAN 
              class=texample>qsort()</SPAN> получает четвертым аргументом 
              указатель на составляемую пользователем функцию сравнения 
              сортируемых элементов.
              <LI>Использование указателей на функции в качестве аргументов 
              позволяет разрабатывать универсальные функции, реализующие 
              известные алгоритмы или методы. Например, функции численного 
              решения уравнений, интегрирования и дифференцирования.
              <LI>Указатели на функции могут использоваться для косвенного 
              вызова резидентных программ, точка входа в которые записана в 
              известное место памяти, например, по одному из неиспользуемых 
              векторов прерываний.</LI></UL>
            <DIV id=mark_49 class=lecture_mark></DIV>
            <P id=id_54>В определении указателя на функцию тип возвращаемого 
            значения, а также типы, количество, последовательность параметров 
            должны совпадать с соответствующими типами и характеристиками 
            параметров тех функций, адреса которых предполагается присваивать 
            вводимому указателю при инициализации или с помощью оператора 
            присваивания.</P>
            <DIV id=mark_54 class=lecture_mark></DIV>
            <P id=id_55><SPAN class=xml_em_italic>Пример 1</SPAN>.</P>
            <DIV id=mark_55 class=lecture_mark></DIV>
            <DIV class=example><PRE>//Определение и использование указателей на функции
#include "stdafx.h"
#include &lt;iostream&gt;
using namespace std;
//Определение и использование указателей на функции
void f1(); //объявление (прототип)функции f1
void f2(); //объявление (прототип)функции f2

int _tmain(int argc, _TCHAR* argv[]) {
  void (*ptr)(); //ptr - указатель на функцию
  f2(); //явный вызов функции f2
  ptr=f2;//указателю присваивается адрес функции f2
  (*ptr)();
  //вызов функции f2 по ее адресу с разыменованием указателя
  ptr=f1;//указателю присваивается адрес функции f1
  (*ptr)();
  //вызов функции f1 по ее адресу с разыменованием указателя
  ptr(); // вызов функции f1 без разыменованием указателя
  system("pause");
  return 0;
}
//описание функции f1 и f2
void f1() { 
  cout &lt;&lt; "Выполняется f1\n"; 
}
void f2() { 
  cout &lt;&lt; "Выполняется f2\n"; 
}
</PRE></DIV>
            <P id=id_57><SPAN class=xml_em_italic>Пример 2</SPAN>.</P>
            <DIV id=mark_57 class=lecture_mark></DIV>
            <DIV class=example><PRE>//Вариант 1 использования указателя на функцию
#include "stdafx.h"
#include &lt;iostream&gt;
using namespace std;
float plus(float, float); //Объявление (прототип) функции

int _tmain(int argc, _TCHAR* argv[]){
  float x=2.1, y=4.89;
  float (*func)(float,float);
  //определение указателя func на функцию
  printf("Сумма равна %.3f\n",plus(x,y));
  func=plus; 
  //указателю присвоить адрес func точки входа в функцию plus
  printf("(Используем указатель на функцию) 
          Сумма = %.3f\n",func(x,y));
  system("pause");
  return 0;
}
//Описание функции сложения двух аргументов
float plus(float a, float b) {
  return a+b; 
}

//Вариант 2 использования указателя на функцию
#include "stdafx.h"
#include &lt;iostream&gt;
using namespace std;
float plus(float, float); //Объявление (прототип)функции

int _tmain(int argc, _TCHAR* argv[]){
  float x=2.1, y=4.89;
  float (*func)(float, float)=&amp;plus; 
  //определение указателя на функцию plus
  printf("Сумма равна %.3f\n",plus(x,y));
  func=plus; 
  //указателю присвоить адрес точки входа в функцию plus
  printf("(Используем указатель на функцию) 
          Сумма = %.3f\n",func(x,y));
  system("pause");
  return 0;
}
//Описание функции сложения двух аргументов
float plus(float a, float b) {
  return a+b;
}
</PRE></DIV>
            <P id=id_59><B>Указатели на функции как параметры</B> позволяют 
            создавать функции, реализующие тот или иной метод обработки другой 
            функции, которая заранее не определена. Например, можно определить 
            функцию для вычисления определенного интеграла от произвольной 
            функции. Подынтегральная функция может быть передана в функцию 
            вычисления интеграла с помощью параметра-указателя.</P>
            <DIV id=mark_59 class=lecture_mark></DIV>
            <P id=id_60><SPAN class=xml_em_italic>Пример 3</SPAN>: Вычислите 
            приближенное значение интегралов с помощью формулы прямоугольников, 
            задав пределы интегрирования <SPAN class=texample>[a, b]</SPAN> и 
            число интервалов разбиения <IMG 
            style="POSITION: relative; DISPLAY: inline; TOP: 13px" 
            alt="(N): \int\limits_a^b \frac{xdx}{(x^2+1)^2}" 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/8be9e2e7d2aa821dcf174cbcf08aa792.png" 
            width=117 height=47> и <IMG 
            style="POSITION: relative; DISPLAY: inline; TOP: 13px" 
            alt="\int\limits_a^b 4\cos^2 xdx" 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/2827555eb6295a7de301440a4764a6b3.png" 
            width=98 height=47>.</P>
            <DIV id=mark_60 class=lecture_mark></DIV>
            <DIV class=example><PRE>#include "stdafx.h"
#include &lt;iostream&gt;
using namespace std;
//Объявление (прототипы) функций:
/*функция rectangle() возвращает значение типа double, ее параметры:*/
/*pf–указатель на функцию с параметром типа double, возвращающую значение double*/
/*a, b – пределы интегрирования, величины типа double*/
double rectangle(double(*pf)(double), double a, double b);

/*функция ratio() возвращает значение типа double, ее параметр типа double*/
double ratio(double x);

/*функция cos4_2() возвращает значение типа double, ее параметр типа double*/
double cos4_2(double v);

int _tmain(int argc, _TCHAR* argv[]){
  double a,b,c;
  printf("\nВведите значения пределов интегрирования:");
  printf("\na= ");
  scanf("%lf",&amp;a);
  printf("\nb= ");
  scanf("%lf",&amp;b);
  c=rectangle(ratio,a,b);
  printf("Первый интеграл = %f\n",c);
  printf("Второй интеграл = %f\n",rectangle(cos4_2,a,b));
  system("pause");
  return 0;
}

double rectangle(double(*pf)(double), double a, double b){
/*Вычисление определенного интеграла с помощью формулы прямоугольников*/
  int N, i;
  double h,s=0.0;
  printf("\nВведите количество интервалов разбиения: N= ");
  scanf("%d",&amp;N);
  printf("\na= ");
  h=(b-a)/N;  //Длина интервала разбиения
  for (i=0;i&lt;N;i++)
    s+=pf(a+h/2+i*h);
  return h*s;
}            

double ratio(double x) { //Подынтегральная функция
  double z; //Вспомогательная переменная
  z=x*x+1;
  return x/(z*z);
}

double cos4_2(double v){ //Подынтегральная функция
  double w; //Вспомогательная переменная
  w=cos(v);
  return 4*w*w;
}
</PRE></DIV><A name=sect2></A>
            <H3>Ключевые термины</H3>
            <P id=id_65><B>Адрес функции</B> – это адрес памяти, с которого 
            начинается машинный код функции.</P>
            <DIV id=mark_65 class=lecture_mark></DIV>
            <P id=id_66><B>Косвенное обращение по указателю на функцию</B> – это 
            вызов функции, адресуемой указателем.</P>
            <DIV id=mark_66 class=lecture_mark></DIV>
            <P id=id_67><B>Указатели на функции как параметры функции</B> – это 
            параметры функции, типы которых определены как указатели на функции. 
            </P>
            <DIV id=mark_67 class=lecture_mark></DIV>
            <P id=id_68><B>Указатель на функцию</B> – это переменная, которая 
            содержит адрес этой функции.</P>
            <DIV id=mark_68 class=lecture_mark></DIV><A name=sect3></A>
            <H3>Краткие итоги</H3>
            <OL id=id_69>
              <LI>Адресация функций осуществляется по первому байту расположения 
              машинного кода функции в памяти.
              <LI>Инициализированный указатель на функцию содержит адрес этой 
              функции.
              <LI>Арифметические операции над указателями на функции запрещены в 
              силу их внутреннего представления.
              <LI>При описании указателя на функцию необходимо соблюдать 
              приоритет операций. Разыменование имеет низкий приоритет, поэтому 
              порядок действий определяется круглыми скобками.
              <LI>При описании указателя на функцию в качестве параметров можно 
              указывать пустой список или список типов параметров.
              <LI>При вызове функции через указатель необходимо, чтобы типы и 
              набор фактических параметров совпадали с прототипом адресуемой 
              функции.
              <LI>Функции можно передавать в качестве параметров функций.
              <LI>Указатели на функции и указатели как параметры функции имеют 
              широкое практическое применение в программировании.</LI></OL>
            <DIV id=mark_69 class=lecture_mark></DIV><A name=sect4></A>
            <H3>Лабораторная работа 5. Тип указатель: указатели на функции.</H3>
            <P id=id_78><B>Цель работы:</B> изучить указатели на функции и 
            методы передачи функций как параметров, научиться использовать 
            указатели на функции в программных кодах на языке C++.</P>
            <DIV id=mark_78 class=lecture_mark></DIV>
            <P id=id_79>При выполнении лабораторной работы для каждого задания 
            требуется написать программу на языке С++, которая получает на входе 
            данные в соответствии с форматами, обозначенными условиями задач. 
            Программа выполняет обработку входных данных в соответствии с 
            требованиями задания и выводит результат на экран. Ввод данных 
            осуществляется с клавиатуры с учетом требований к входным данным, 
            содержащихся в постановке задачи. Ограничениями на входные данные 
            является допустимый диапазон значений используемых числовых типов в 
            языке С++.</P>
            <DIV id=mark_79 class=lecture_mark></DIV>
            <P id=id_80><B>Теоретические сведения.</B></P>
            <DIV id=mark_80 class=lecture_mark></DIV>
            <P id=id_81>Ознакомьтесь с материалом лекции 5.</P>
            <DIV id=mark_81 class=lecture_mark></DIV>
            <P id=id_82><B>Задания к лабораторной работе.</B></P>
            <DIV id=mark_82 class=lecture_mark></DIV>
            <OL id=id_83>
              <LI>Методом половинного деления решите уравнения на отрезке <IMG 
              style="POSITION: relative; DISPLAY: inline; TOP: 6px" alt="[a, b]" 
              src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/626c95d15f91dc6005d4a4b1e7ec2e6d.png" 
              width=38 height=22> с данной точностью <IMG 
              style="POSITION: relative; DISPLAY: inline; TOP: 6px" 
              alt="е: \cos x=x^2,\quad 0,6\sqrt[3]{x}=\log_5 x" 
              src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/fd12a5bb5d7c591bb90b51c937b22e9d.png" 
              width=255 height=22>. При решении считать, что на данном отрезке 
              существует единственный корень. Решите первое уравнение на отрезке 
              [0, 1], а второе на отрезке [100, 150].
              <LI>Решите задачу, используя один указатель на функцию. 
              Разработайте четыре функции над двумя целыми параметрами, 
              соответствующие арифметическим операциям (+, -, *, /). В основной 
              программе задавайте два целых параметра и символьный знак операции 
              до тех пор, пока не будет введен пробел в качестве знака операции. 
              В выходных данных выводите значения функций.
              <LI>Вычислите суммы с данной точностью е. Используйте указатели на 
              функции как параметры: <IMG 
              style="POSITION: relative; DISPLAY: inline; TOP: 7px" 
              alt="\sum_{n=1}^{\infty}\frac{\sin n}{n}" 
              src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/3f852a6b0c94b1506220e224d1f6e49a.png" 
              width=87 height=25> и <IMG 
              style="POSITION: relative; DISPLAY: inline; TOP: 6px" 
              alt=\sum_{n=1}^{\infty}\frac{n}{e^n} 
              src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/bdb3c419c80153bf52492a41eab91832.png" 
              width=70 height=23>.</LI></OL>
            <DIV id=mark_83 class=lecture_mark></DIV>
            <P id=id_91><B>Указания к выполнению работы.</B></P>
            <DIV id=mark_91 class=lecture_mark></DIV>
            <P id=id_92>Каждое задание необходимо решить в соответствии с 
            изученными методами работы с указателями на функции в языке С++. 
            Программу для решения каждого задания необходимо разработать методом 
            процедурной абстракции, используя указатели на функции и функции в 
            качестве параметров функций. Этапы решения задач сопроводить 
            комментариями в коде.</P>
            <DIV id=mark_92 class=lecture_mark></DIV>
            <P id=id_93>Следует реализовать каждое задание в соответствии с 
            приведенными этапами:</P>
            <DIV id=mark_93 class=lecture_mark></DIV>
            <UL id=id_94>
              <LI>изучить словесную постановку задачи, выделив при этом все виды 
              данных;
              <LI>сформулировать математическую постановку задачи;
              <LI>выбрать метод решения задачи, если это необходимо;
              <LI>разработать графическую схему алгоритма;
              <LI>записать разработанный алгоритм на языке С++;
              <LI>разработать контрольный тест к программе;
              <LI>отладить программу;
              <LI>представить отчет по работе.</LI></UL>
            <DIV id=mark_94 class=lecture_mark></DIV>
            <P id=id_103><B>Требования к отчету.</B></P>
            <DIV id=mark_103 class=lecture_mark></DIV>
            <P id=id_104>Отчет по лабораторной работе должен соответствовать 
            следующей структуре.</P>
            <DIV id=mark_104 class=lecture_mark></DIV>
            <UL id=id_105>
              <LI>Титульный лист.
              <LI>Словесная постановка задачи. В этом подразделе проводится 
              полное описание задачи. Описывается суть задачи, анализ входящих в 
              нее физических величин, область их допустимых значений, единицы их 
              измерения, возможные ограничения, анализ условий при которых 
              задача имеет решение (не имеет решения), анализ ожидаемых 
              результатов.
              <LI>Математическая модель. В этом подразделе вводятся 
              математические описания физических величин и математическое 
              описание их взаимодействий. Цель подраздела – представить решаемую 
              задачу в математической формулировке.
              <LI>Алгоритм решения задачи. В подразделе описывается разработка 
              структуры алгоритма, обосновывается абстракция данных, задача 
              разбивается на подзадачи. Схема алгоритма выполняется по ЕСПД 
              (ГОСТ 19.003-80 и ГОСТ 19.002-80).
              <LI>Листинг программы. Подраздел должен содержать текст программы 
              на языке программирования С++, реализованный в среде MS Visual 
              Studio 2010.
              <LI>Контрольный тест. Подраздел содержит наборы исходных данных и 
              полученные в ходе выполнения программы результаты.
              <LI>Выводы по лабораторной работе. 
              <LI>Ответы на контрольные вопросы.</LI></UL>
            <DIV id=mark_105 class=lecture_mark></DIV>
            <P id=id_114><B>Контрольные вопросы</B></P>
            <DIV id=mark_114 class=lecture_mark></DIV>
            <OL id=id_115>
              <LI>Почему запрещены арифметические операции над указателями на 
              функции?
              <LI>Почему в описании указателя на функцию необходимы круглые 
              скобки при имени указателя?
              <LI>Может ли функция возвращать значение типа указатель? Если да, 
              то как объявляется прототип такой функции?
              <LI>Могут ли параметрами функции быть указатели на объекты? Если 
              да, то как происходит передача фактических параметров при вызове 
              функции?
              <LI>Могут ли параметрами функции быть указатели на функции? Если 
              да, то как происходит передача фактических параметров при вызове 
              функции?
              <LI>Как понимается следующее объявление: 
              <DIV class=example><PRE>float *(*func)(int(*pf)(char),float);?
</PRE></DIV>
              <LI>В чем отличие результатов вызова функции через указатель с 
              последующим разыменованием указателя и без разыменования 
              указателя?</LI></OL>
            <DIV id=mark_115 class=lecture_mark></DIV></TD></TR>
        <TR>
          <TD height=8><IMG 
            src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
            width=1 height=8></TD></TR></TBODY></TABLE><!-- /content --></TD>
    <TD><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=8 height=1></TD></TR></TBODY></TABLE><!-- /bottom -->
<TABLE border=0 cellSpacing=0 cellPadding=0 width="100%">
  <TBODY>
  <TR>
    <TD class=orang height=1><IMG 
      src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/empty.gif" 
      width=1 height=1></TD></TR>
  <TR>
    <TD class=ltxt align=center>© INTUIT.ru, 2003-2010. Все права 
  защищены.</TD></TR></TBODY></TABLE><!-- /bottom -->
<SCRIPT type=text/javascript 
src="INTUIT_ruИнтернет-Университет%20Информационных%20Технологий_files/urchin.js">
</SCRIPT>

<SCRIPT 
type=text/javascript>
_uacct = "UA-3475067-1";
urchinTracker();
</SCRIPT>
</BODY></HTML>
